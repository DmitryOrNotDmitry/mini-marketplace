// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/service.StockRepoFactory -o stock_repo_factory_mock.go -n StockRepoFactoryMock -p mocks

import (
	"context"
	mm_service "route256/loms/internal/service"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockRepoFactoryMock implements mm_service.StockRepoFactory
type StockRepoFactoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateStock          func(ctx context.Context, operationType mm_service.OperationType) (s1 mm_service.StockRepository)
	funcCreateStockOrigin    string
	inspectFuncCreateStock   func(ctx context.Context, operationType mm_service.OperationType)
	afterCreateStockCounter  uint64
	beforeCreateStockCounter uint64
	CreateStockMock          mStockRepoFactoryMockCreateStock
}

// NewStockRepoFactoryMock returns a mock for mm_service.StockRepoFactory
func NewStockRepoFactoryMock(t minimock.Tester) *StockRepoFactoryMock {
	m := &StockRepoFactoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateStockMock = mStockRepoFactoryMockCreateStock{mock: m}
	m.CreateStockMock.callArgs = []*StockRepoFactoryMockCreateStockParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockRepoFactoryMockCreateStock struct {
	optional           bool
	mock               *StockRepoFactoryMock
	defaultExpectation *StockRepoFactoryMockCreateStockExpectation
	expectations       []*StockRepoFactoryMockCreateStockExpectation

	callArgs []*StockRepoFactoryMockCreateStockParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockRepoFactoryMockCreateStockExpectation specifies expectation struct of the StockRepoFactory.CreateStock
type StockRepoFactoryMockCreateStockExpectation struct {
	mock               *StockRepoFactoryMock
	params             *StockRepoFactoryMockCreateStockParams
	paramPtrs          *StockRepoFactoryMockCreateStockParamPtrs
	expectationOrigins StockRepoFactoryMockCreateStockExpectationOrigins
	results            *StockRepoFactoryMockCreateStockResults
	returnOrigin       string
	Counter            uint64
}

// StockRepoFactoryMockCreateStockParams contains parameters of the StockRepoFactory.CreateStock
type StockRepoFactoryMockCreateStockParams struct {
	ctx           context.Context
	operationType mm_service.OperationType
}

// StockRepoFactoryMockCreateStockParamPtrs contains pointers to parameters of the StockRepoFactory.CreateStock
type StockRepoFactoryMockCreateStockParamPtrs struct {
	ctx           *context.Context
	operationType *mm_service.OperationType
}

// StockRepoFactoryMockCreateStockResults contains results of the StockRepoFactory.CreateStock
type StockRepoFactoryMockCreateStockResults struct {
	s1 mm_service.StockRepository
}

// StockRepoFactoryMockCreateStockOrigins contains origins of expectations of the StockRepoFactory.CreateStock
type StockRepoFactoryMockCreateStockExpectationOrigins struct {
	origin              string
	originCtx           string
	originOperationType string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Optional() *mStockRepoFactoryMockCreateStock {
	mmCreateStock.optional = true
	return mmCreateStock
}

// Expect sets up expected params for StockRepoFactory.CreateStock
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Expect(ctx context.Context, operationType mm_service.OperationType) *mStockRepoFactoryMockCreateStock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepoFactoryMockCreateStockExpectation{}
	}

	if mmCreateStock.defaultExpectation.paramPtrs != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by ExpectParams functions")
	}

	mmCreateStock.defaultExpectation.params = &StockRepoFactoryMockCreateStockParams{ctx, operationType}
	mmCreateStock.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateStock.expectations {
		if minimock.Equal(e.params, mmCreateStock.defaultExpectation.params) {
			mmCreateStock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateStock.defaultExpectation.params)
		}
	}

	return mmCreateStock
}

// ExpectCtxParam1 sets up expected param ctx for StockRepoFactory.CreateStock
func (mmCreateStock *mStockRepoFactoryMockCreateStock) ExpectCtxParam1(ctx context.Context) *mStockRepoFactoryMockCreateStock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepoFactoryMockCreateStockExpectation{}
	}

	if mmCreateStock.defaultExpectation.params != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Expect")
	}

	if mmCreateStock.defaultExpectation.paramPtrs == nil {
		mmCreateStock.defaultExpectation.paramPtrs = &StockRepoFactoryMockCreateStockParamPtrs{}
	}
	mmCreateStock.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateStock.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateStock
}

// ExpectOperationTypeParam2 sets up expected param operationType for StockRepoFactory.CreateStock
func (mmCreateStock *mStockRepoFactoryMockCreateStock) ExpectOperationTypeParam2(operationType mm_service.OperationType) *mStockRepoFactoryMockCreateStock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepoFactoryMockCreateStockExpectation{}
	}

	if mmCreateStock.defaultExpectation.params != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Expect")
	}

	if mmCreateStock.defaultExpectation.paramPtrs == nil {
		mmCreateStock.defaultExpectation.paramPtrs = &StockRepoFactoryMockCreateStockParamPtrs{}
	}
	mmCreateStock.defaultExpectation.paramPtrs.operationType = &operationType
	mmCreateStock.defaultExpectation.expectationOrigins.originOperationType = minimock.CallerInfo(1)

	return mmCreateStock
}

// Inspect accepts an inspector function that has same arguments as the StockRepoFactory.CreateStock
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Inspect(f func(ctx context.Context, operationType mm_service.OperationType)) *mStockRepoFactoryMockCreateStock {
	if mmCreateStock.mock.inspectFuncCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("Inspect function is already set for StockRepoFactoryMock.CreateStock")
	}

	mmCreateStock.mock.inspectFuncCreateStock = f

	return mmCreateStock
}

// Return sets up results that will be returned by StockRepoFactory.CreateStock
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Return(s1 mm_service.StockRepository) *StockRepoFactoryMock {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Set")
	}

	if mmCreateStock.defaultExpectation == nil {
		mmCreateStock.defaultExpectation = &StockRepoFactoryMockCreateStockExpectation{mock: mmCreateStock.mock}
	}
	mmCreateStock.defaultExpectation.results = &StockRepoFactoryMockCreateStockResults{s1}
	mmCreateStock.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateStock.mock
}

// Set uses given function f to mock the StockRepoFactory.CreateStock method
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Set(f func(ctx context.Context, operationType mm_service.OperationType) (s1 mm_service.StockRepository)) *StockRepoFactoryMock {
	if mmCreateStock.defaultExpectation != nil {
		mmCreateStock.mock.t.Fatalf("Default expectation is already set for the StockRepoFactory.CreateStock method")
	}

	if len(mmCreateStock.expectations) > 0 {
		mmCreateStock.mock.t.Fatalf("Some expectations are already set for the StockRepoFactory.CreateStock method")
	}

	mmCreateStock.mock.funcCreateStock = f
	mmCreateStock.mock.funcCreateStockOrigin = minimock.CallerInfo(1)
	return mmCreateStock.mock
}

// When sets expectation for the StockRepoFactory.CreateStock which will trigger the result defined by the following
// Then helper
func (mmCreateStock *mStockRepoFactoryMockCreateStock) When(ctx context.Context, operationType mm_service.OperationType) *StockRepoFactoryMockCreateStockExpectation {
	if mmCreateStock.mock.funcCreateStock != nil {
		mmCreateStock.mock.t.Fatalf("StockRepoFactoryMock.CreateStock mock is already set by Set")
	}

	expectation := &StockRepoFactoryMockCreateStockExpectation{
		mock:               mmCreateStock.mock,
		params:             &StockRepoFactoryMockCreateStockParams{ctx, operationType},
		expectationOrigins: StockRepoFactoryMockCreateStockExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateStock.expectations = append(mmCreateStock.expectations, expectation)
	return expectation
}

// Then sets up StockRepoFactory.CreateStock return parameters for the expectation previously defined by the When method
func (e *StockRepoFactoryMockCreateStockExpectation) Then(s1 mm_service.StockRepository) *StockRepoFactoryMock {
	e.results = &StockRepoFactoryMockCreateStockResults{s1}
	return e.mock
}

// Times sets number of times StockRepoFactory.CreateStock should be invoked
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Times(n uint64) *mStockRepoFactoryMockCreateStock {
	if n == 0 {
		mmCreateStock.mock.t.Fatalf("Times of StockRepoFactoryMock.CreateStock mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateStock.expectedInvocations, n)
	mmCreateStock.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateStock
}

func (mmCreateStock *mStockRepoFactoryMockCreateStock) invocationsDone() bool {
	if len(mmCreateStock.expectations) == 0 && mmCreateStock.defaultExpectation == nil && mmCreateStock.mock.funcCreateStock == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateStock.mock.afterCreateStockCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateStock.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateStock implements mm_service.StockRepoFactory
func (mmCreateStock *StockRepoFactoryMock) CreateStock(ctx context.Context, operationType mm_service.OperationType) (s1 mm_service.StockRepository) {
	mm_atomic.AddUint64(&mmCreateStock.beforeCreateStockCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateStock.afterCreateStockCounter, 1)

	mmCreateStock.t.Helper()

	if mmCreateStock.inspectFuncCreateStock != nil {
		mmCreateStock.inspectFuncCreateStock(ctx, operationType)
	}

	mm_params := StockRepoFactoryMockCreateStockParams{ctx, operationType}

	// Record call args
	mmCreateStock.CreateStockMock.mutex.Lock()
	mmCreateStock.CreateStockMock.callArgs = append(mmCreateStock.CreateStockMock.callArgs, &mm_params)
	mmCreateStock.CreateStockMock.mutex.Unlock()

	for _, e := range mmCreateStock.CreateStockMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmCreateStock.CreateStockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateStock.CreateStockMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateStock.CreateStockMock.defaultExpectation.params
		mm_want_ptrs := mmCreateStock.CreateStockMock.defaultExpectation.paramPtrs

		mm_got := StockRepoFactoryMockCreateStockParams{ctx, operationType}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateStock.t.Errorf("StockRepoFactoryMock.CreateStock got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateStock.CreateStockMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.operationType != nil && !minimock.Equal(*mm_want_ptrs.operationType, mm_got.operationType) {
				mmCreateStock.t.Errorf("StockRepoFactoryMock.CreateStock got unexpected parameter operationType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateStock.CreateStockMock.defaultExpectation.expectationOrigins.originOperationType, *mm_want_ptrs.operationType, mm_got.operationType, minimock.Diff(*mm_want_ptrs.operationType, mm_got.operationType))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateStock.t.Errorf("StockRepoFactoryMock.CreateStock got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateStock.CreateStockMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateStock.CreateStockMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateStock.t.Fatal("No results are set for the StockRepoFactoryMock.CreateStock")
		}
		return (*mm_results).s1
	}
	if mmCreateStock.funcCreateStock != nil {
		return mmCreateStock.funcCreateStock(ctx, operationType)
	}
	mmCreateStock.t.Fatalf("Unexpected call to StockRepoFactoryMock.CreateStock. %v %v", ctx, operationType)
	return
}

// CreateStockAfterCounter returns a count of finished StockRepoFactoryMock.CreateStock invocations
func (mmCreateStock *StockRepoFactoryMock) CreateStockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateStock.afterCreateStockCounter)
}

// CreateStockBeforeCounter returns a count of StockRepoFactoryMock.CreateStock invocations
func (mmCreateStock *StockRepoFactoryMock) CreateStockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateStock.beforeCreateStockCounter)
}

// Calls returns a list of arguments used in each call to StockRepoFactoryMock.CreateStock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateStock *mStockRepoFactoryMockCreateStock) Calls() []*StockRepoFactoryMockCreateStockParams {
	mmCreateStock.mutex.RLock()

	argCopy := make([]*StockRepoFactoryMockCreateStockParams, len(mmCreateStock.callArgs))
	copy(argCopy, mmCreateStock.callArgs)

	mmCreateStock.mutex.RUnlock()

	return argCopy
}

// MinimockCreateStockDone returns true if the count of the CreateStock invocations corresponds
// the number of defined expectations
func (m *StockRepoFactoryMock) MinimockCreateStockDone() bool {
	if m.CreateStockMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateStockMock.invocationsDone()
}

// MinimockCreateStockInspect logs each unmet expectation
func (m *StockRepoFactoryMock) MinimockCreateStockInspect() {
	for _, e := range m.CreateStockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoFactoryMock.CreateStock at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateStockCounter := mm_atomic.LoadUint64(&m.afterCreateStockCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateStockMock.defaultExpectation != nil && afterCreateStockCounter < 1 {
		if m.CreateStockMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockRepoFactoryMock.CreateStock at\n%s", m.CreateStockMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockRepoFactoryMock.CreateStock at\n%s with params: %#v", m.CreateStockMock.defaultExpectation.expectationOrigins.origin, *m.CreateStockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateStock != nil && afterCreateStockCounter < 1 {
		m.t.Errorf("Expected call to StockRepoFactoryMock.CreateStock at\n%s", m.funcCreateStockOrigin)
	}

	if !m.CreateStockMock.invocationsDone() && afterCreateStockCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepoFactoryMock.CreateStock at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateStockMock.expectedInvocations), m.CreateStockMock.expectedInvocationsOrigin, afterCreateStockCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockRepoFactoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateStockInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockRepoFactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockRepoFactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateStockDone()
}
