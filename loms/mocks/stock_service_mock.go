// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/handler.StockService -o stock_service_mock.go -n StockServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockServiceMock implements mm_handler.StockService
type StockServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetAvailableCount          func(ctx context.Context, skuID int64) (u1 uint32, err error)
	funcGetAvailableCountOrigin    string
	inspectFuncGetAvailableCount   func(ctx context.Context, skuID int64)
	afterGetAvailableCountCounter  uint64
	beforeGetAvailableCountCounter uint64
	GetAvailableCountMock          mStockServiceMockGetAvailableCount
}

// NewStockServiceMock returns a mock for mm_handler.StockService
func NewStockServiceMock(t minimock.Tester) *StockServiceMock {
	m := &StockServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAvailableCountMock = mStockServiceMockGetAvailableCount{mock: m}
	m.GetAvailableCountMock.callArgs = []*StockServiceMockGetAvailableCountParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockServiceMockGetAvailableCount struct {
	optional           bool
	mock               *StockServiceMock
	defaultExpectation *StockServiceMockGetAvailableCountExpectation
	expectations       []*StockServiceMockGetAvailableCountExpectation

	callArgs []*StockServiceMockGetAvailableCountParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockServiceMockGetAvailableCountExpectation specifies expectation struct of the StockService.GetAvailableCount
type StockServiceMockGetAvailableCountExpectation struct {
	mock               *StockServiceMock
	params             *StockServiceMockGetAvailableCountParams
	paramPtrs          *StockServiceMockGetAvailableCountParamPtrs
	expectationOrigins StockServiceMockGetAvailableCountExpectationOrigins
	results            *StockServiceMockGetAvailableCountResults
	returnOrigin       string
	Counter            uint64
}

// StockServiceMockGetAvailableCountParams contains parameters of the StockService.GetAvailableCount
type StockServiceMockGetAvailableCountParams struct {
	ctx   context.Context
	skuID int64
}

// StockServiceMockGetAvailableCountParamPtrs contains pointers to parameters of the StockService.GetAvailableCount
type StockServiceMockGetAvailableCountParamPtrs struct {
	ctx   *context.Context
	skuID *int64
}

// StockServiceMockGetAvailableCountResults contains results of the StockService.GetAvailableCount
type StockServiceMockGetAvailableCountResults struct {
	u1  uint32
	err error
}

// StockServiceMockGetAvailableCountOrigins contains origins of expectations of the StockService.GetAvailableCount
type StockServiceMockGetAvailableCountExpectationOrigins struct {
	origin      string
	originCtx   string
	originSkuID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Optional() *mStockServiceMockGetAvailableCount {
	mmGetAvailableCount.optional = true
	return mmGetAvailableCount
}

// Expect sets up expected params for StockService.GetAvailableCount
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Expect(ctx context.Context, skuID int64) *mStockServiceMockGetAvailableCount {
	if mmGetAvailableCount.mock.funcGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Set")
	}

	if mmGetAvailableCount.defaultExpectation == nil {
		mmGetAvailableCount.defaultExpectation = &StockServiceMockGetAvailableCountExpectation{}
	}

	if mmGetAvailableCount.defaultExpectation.paramPtrs != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by ExpectParams functions")
	}

	mmGetAvailableCount.defaultExpectation.params = &StockServiceMockGetAvailableCountParams{ctx, skuID}
	mmGetAvailableCount.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAvailableCount.expectations {
		if minimock.Equal(e.params, mmGetAvailableCount.defaultExpectation.params) {
			mmGetAvailableCount.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAvailableCount.defaultExpectation.params)
		}
	}

	return mmGetAvailableCount
}

// ExpectCtxParam1 sets up expected param ctx for StockService.GetAvailableCount
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) ExpectCtxParam1(ctx context.Context) *mStockServiceMockGetAvailableCount {
	if mmGetAvailableCount.mock.funcGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Set")
	}

	if mmGetAvailableCount.defaultExpectation == nil {
		mmGetAvailableCount.defaultExpectation = &StockServiceMockGetAvailableCountExpectation{}
	}

	if mmGetAvailableCount.defaultExpectation.params != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Expect")
	}

	if mmGetAvailableCount.defaultExpectation.paramPtrs == nil {
		mmGetAvailableCount.defaultExpectation.paramPtrs = &StockServiceMockGetAvailableCountParamPtrs{}
	}
	mmGetAvailableCount.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAvailableCount.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAvailableCount
}

// ExpectSkuIDParam2 sets up expected param skuID for StockService.GetAvailableCount
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) ExpectSkuIDParam2(skuID int64) *mStockServiceMockGetAvailableCount {
	if mmGetAvailableCount.mock.funcGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Set")
	}

	if mmGetAvailableCount.defaultExpectation == nil {
		mmGetAvailableCount.defaultExpectation = &StockServiceMockGetAvailableCountExpectation{}
	}

	if mmGetAvailableCount.defaultExpectation.params != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Expect")
	}

	if mmGetAvailableCount.defaultExpectation.paramPtrs == nil {
		mmGetAvailableCount.defaultExpectation.paramPtrs = &StockServiceMockGetAvailableCountParamPtrs{}
	}
	mmGetAvailableCount.defaultExpectation.paramPtrs.skuID = &skuID
	mmGetAvailableCount.defaultExpectation.expectationOrigins.originSkuID = minimock.CallerInfo(1)

	return mmGetAvailableCount
}

// Inspect accepts an inspector function that has same arguments as the StockService.GetAvailableCount
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Inspect(f func(ctx context.Context, skuID int64)) *mStockServiceMockGetAvailableCount {
	if mmGetAvailableCount.mock.inspectFuncGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("Inspect function is already set for StockServiceMock.GetAvailableCount")
	}

	mmGetAvailableCount.mock.inspectFuncGetAvailableCount = f

	return mmGetAvailableCount
}

// Return sets up results that will be returned by StockService.GetAvailableCount
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Return(u1 uint32, err error) *StockServiceMock {
	if mmGetAvailableCount.mock.funcGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Set")
	}

	if mmGetAvailableCount.defaultExpectation == nil {
		mmGetAvailableCount.defaultExpectation = &StockServiceMockGetAvailableCountExpectation{mock: mmGetAvailableCount.mock}
	}
	mmGetAvailableCount.defaultExpectation.results = &StockServiceMockGetAvailableCountResults{u1, err}
	mmGetAvailableCount.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAvailableCount.mock
}

// Set uses given function f to mock the StockService.GetAvailableCount method
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Set(f func(ctx context.Context, skuID int64) (u1 uint32, err error)) *StockServiceMock {
	if mmGetAvailableCount.defaultExpectation != nil {
		mmGetAvailableCount.mock.t.Fatalf("Default expectation is already set for the StockService.GetAvailableCount method")
	}

	if len(mmGetAvailableCount.expectations) > 0 {
		mmGetAvailableCount.mock.t.Fatalf("Some expectations are already set for the StockService.GetAvailableCount method")
	}

	mmGetAvailableCount.mock.funcGetAvailableCount = f
	mmGetAvailableCount.mock.funcGetAvailableCountOrigin = minimock.CallerInfo(1)
	return mmGetAvailableCount.mock
}

// When sets expectation for the StockService.GetAvailableCount which will trigger the result defined by the following
// Then helper
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) When(ctx context.Context, skuID int64) *StockServiceMockGetAvailableCountExpectation {
	if mmGetAvailableCount.mock.funcGetAvailableCount != nil {
		mmGetAvailableCount.mock.t.Fatalf("StockServiceMock.GetAvailableCount mock is already set by Set")
	}

	expectation := &StockServiceMockGetAvailableCountExpectation{
		mock:               mmGetAvailableCount.mock,
		params:             &StockServiceMockGetAvailableCountParams{ctx, skuID},
		expectationOrigins: StockServiceMockGetAvailableCountExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAvailableCount.expectations = append(mmGetAvailableCount.expectations, expectation)
	return expectation
}

// Then sets up StockService.GetAvailableCount return parameters for the expectation previously defined by the When method
func (e *StockServiceMockGetAvailableCountExpectation) Then(u1 uint32, err error) *StockServiceMock {
	e.results = &StockServiceMockGetAvailableCountResults{u1, err}
	return e.mock
}

// Times sets number of times StockService.GetAvailableCount should be invoked
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Times(n uint64) *mStockServiceMockGetAvailableCount {
	if n == 0 {
		mmGetAvailableCount.mock.t.Fatalf("Times of StockServiceMock.GetAvailableCount mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAvailableCount.expectedInvocations, n)
	mmGetAvailableCount.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAvailableCount
}

func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) invocationsDone() bool {
	if len(mmGetAvailableCount.expectations) == 0 && mmGetAvailableCount.defaultExpectation == nil && mmGetAvailableCount.mock.funcGetAvailableCount == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAvailableCount.mock.afterGetAvailableCountCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAvailableCount.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAvailableCount implements mm_handler.StockService
func (mmGetAvailableCount *StockServiceMock) GetAvailableCount(ctx context.Context, skuID int64) (u1 uint32, err error) {
	mm_atomic.AddUint64(&mmGetAvailableCount.beforeGetAvailableCountCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAvailableCount.afterGetAvailableCountCounter, 1)

	mmGetAvailableCount.t.Helper()

	if mmGetAvailableCount.inspectFuncGetAvailableCount != nil {
		mmGetAvailableCount.inspectFuncGetAvailableCount(ctx, skuID)
	}

	mm_params := StockServiceMockGetAvailableCountParams{ctx, skuID}

	// Record call args
	mmGetAvailableCount.GetAvailableCountMock.mutex.Lock()
	mmGetAvailableCount.GetAvailableCountMock.callArgs = append(mmGetAvailableCount.GetAvailableCountMock.callArgs, &mm_params)
	mmGetAvailableCount.GetAvailableCountMock.mutex.Unlock()

	for _, e := range mmGetAvailableCount.GetAvailableCountMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetAvailableCount.GetAvailableCountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.params
		mm_want_ptrs := mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.paramPtrs

		mm_got := StockServiceMockGetAvailableCountParams{ctx, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAvailableCount.t.Errorf("StockServiceMock.GetAvailableCount got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmGetAvailableCount.t.Errorf("StockServiceMock.GetAvailableCount got unexpected parameter skuID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.expectationOrigins.originSkuID, *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAvailableCount.t.Errorf("StockServiceMock.GetAvailableCount got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAvailableCount.GetAvailableCountMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAvailableCount.t.Fatal("No results are set for the StockServiceMock.GetAvailableCount")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetAvailableCount.funcGetAvailableCount != nil {
		return mmGetAvailableCount.funcGetAvailableCount(ctx, skuID)
	}
	mmGetAvailableCount.t.Fatalf("Unexpected call to StockServiceMock.GetAvailableCount. %v %v", ctx, skuID)
	return
}

// GetAvailableCountAfterCounter returns a count of finished StockServiceMock.GetAvailableCount invocations
func (mmGetAvailableCount *StockServiceMock) GetAvailableCountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAvailableCount.afterGetAvailableCountCounter)
}

// GetAvailableCountBeforeCounter returns a count of StockServiceMock.GetAvailableCount invocations
func (mmGetAvailableCount *StockServiceMock) GetAvailableCountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAvailableCount.beforeGetAvailableCountCounter)
}

// Calls returns a list of arguments used in each call to StockServiceMock.GetAvailableCount.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAvailableCount *mStockServiceMockGetAvailableCount) Calls() []*StockServiceMockGetAvailableCountParams {
	mmGetAvailableCount.mutex.RLock()

	argCopy := make([]*StockServiceMockGetAvailableCountParams, len(mmGetAvailableCount.callArgs))
	copy(argCopy, mmGetAvailableCount.callArgs)

	mmGetAvailableCount.mutex.RUnlock()

	return argCopy
}

// MinimockGetAvailableCountDone returns true if the count of the GetAvailableCount invocations corresponds
// the number of defined expectations
func (m *StockServiceMock) MinimockGetAvailableCountDone() bool {
	if m.GetAvailableCountMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAvailableCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAvailableCountMock.invocationsDone()
}

// MinimockGetAvailableCountInspect logs each unmet expectation
func (m *StockServiceMock) MinimockGetAvailableCountInspect() {
	for _, e := range m.GetAvailableCountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceMock.GetAvailableCount at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAvailableCountCounter := mm_atomic.LoadUint64(&m.afterGetAvailableCountCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAvailableCountMock.defaultExpectation != nil && afterGetAvailableCountCounter < 1 {
		if m.GetAvailableCountMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockServiceMock.GetAvailableCount at\n%s", m.GetAvailableCountMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockServiceMock.GetAvailableCount at\n%s with params: %#v", m.GetAvailableCountMock.defaultExpectation.expectationOrigins.origin, *m.GetAvailableCountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAvailableCount != nil && afterGetAvailableCountCounter < 1 {
		m.t.Errorf("Expected call to StockServiceMock.GetAvailableCount at\n%s", m.funcGetAvailableCountOrigin)
	}

	if !m.GetAvailableCountMock.invocationsDone() && afterGetAvailableCountCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceMock.GetAvailableCount at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAvailableCountMock.expectedInvocations), m.GetAvailableCountMock.expectedInvocationsOrigin, afterGetAvailableCountCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetAvailableCountInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAvailableCountDone()
}
