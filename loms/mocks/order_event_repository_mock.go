// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/service.OrderEventRepository -o order_event_repository_mock.go -n OrderEventRepositoryMock -p mocks

import (
	"context"
	"route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderEventRepositoryMock implements mm_service.OrderEventRepository
type OrderEventRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcInsert          func(ctx context.Context, order *domain.Order) (err error)
	funcInsertOrigin    string
	inspectFuncInsert   func(ctx context.Context, order *domain.Order)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mOrderEventRepositoryMockInsert
}

// NewOrderEventRepositoryMock returns a mock for mm_service.OrderEventRepository
func NewOrderEventRepositoryMock(t minimock.Tester) *OrderEventRepositoryMock {
	m := &OrderEventRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InsertMock = mOrderEventRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*OrderEventRepositoryMockInsertParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderEventRepositoryMockInsert struct {
	optional           bool
	mock               *OrderEventRepositoryMock
	defaultExpectation *OrderEventRepositoryMockInsertExpectation
	expectations       []*OrderEventRepositoryMockInsertExpectation

	callArgs []*OrderEventRepositoryMockInsertParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderEventRepositoryMockInsertExpectation specifies expectation struct of the OrderEventRepository.Insert
type OrderEventRepositoryMockInsertExpectation struct {
	mock               *OrderEventRepositoryMock
	params             *OrderEventRepositoryMockInsertParams
	paramPtrs          *OrderEventRepositoryMockInsertParamPtrs
	expectationOrigins OrderEventRepositoryMockInsertExpectationOrigins
	results            *OrderEventRepositoryMockInsertResults
	returnOrigin       string
	Counter            uint64
}

// OrderEventRepositoryMockInsertParams contains parameters of the OrderEventRepository.Insert
type OrderEventRepositoryMockInsertParams struct {
	ctx   context.Context
	order *domain.Order
}

// OrderEventRepositoryMockInsertParamPtrs contains pointers to parameters of the OrderEventRepository.Insert
type OrderEventRepositoryMockInsertParamPtrs struct {
	ctx   *context.Context
	order **domain.Order
}

// OrderEventRepositoryMockInsertResults contains results of the OrderEventRepository.Insert
type OrderEventRepositoryMockInsertResults struct {
	err error
}

// OrderEventRepositoryMockInsertOrigins contains origins of expectations of the OrderEventRepository.Insert
type OrderEventRepositoryMockInsertExpectationOrigins struct {
	origin      string
	originCtx   string
	originOrder string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsert *mOrderEventRepositoryMockInsert) Optional() *mOrderEventRepositoryMockInsert {
	mmInsert.optional = true
	return mmInsert
}

// Expect sets up expected params for OrderEventRepository.Insert
func (mmInsert *mOrderEventRepositoryMockInsert) Expect(ctx context.Context, order *domain.Order) *mOrderEventRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderEventRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.paramPtrs != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by ExpectParams functions")
	}

	mmInsert.defaultExpectation.params = &OrderEventRepositoryMockInsertParams{ctx, order}
	mmInsert.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// ExpectCtxParam1 sets up expected param ctx for OrderEventRepository.Insert
func (mmInsert *mOrderEventRepositoryMockInsert) ExpectCtxParam1(ctx context.Context) *mOrderEventRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderEventRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &OrderEventRepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.ctx = &ctx
	mmInsert.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInsert
}

// ExpectOrderParam2 sets up expected param order for OrderEventRepository.Insert
func (mmInsert *mOrderEventRepositoryMockInsert) ExpectOrderParam2(order *domain.Order) *mOrderEventRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderEventRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &OrderEventRepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.order = &order
	mmInsert.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the OrderEventRepository.Insert
func (mmInsert *mOrderEventRepositoryMockInsert) Inspect(f func(ctx context.Context, order *domain.Order)) *mOrderEventRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for OrderEventRepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by OrderEventRepository.Insert
func (mmInsert *mOrderEventRepositoryMockInsert) Return(err error) *OrderEventRepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderEventRepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &OrderEventRepositoryMockInsertResults{err}
	mmInsert.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// Set uses given function f to mock the OrderEventRepository.Insert method
func (mmInsert *mOrderEventRepositoryMockInsert) Set(f func(ctx context.Context, order *domain.Order) (err error)) *OrderEventRepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the OrderEventRepository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the OrderEventRepository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	mmInsert.mock.funcInsertOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// When sets expectation for the OrderEventRepository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mOrderEventRepositoryMockInsert) When(ctx context.Context, order *domain.Order) *OrderEventRepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderEventRepositoryMock.Insert mock is already set by Set")
	}

	expectation := &OrderEventRepositoryMockInsertExpectation{
		mock:               mmInsert.mock,
		params:             &OrderEventRepositoryMockInsertParams{ctx, order},
		expectationOrigins: OrderEventRepositoryMockInsertExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up OrderEventRepository.Insert return parameters for the expectation previously defined by the When method
func (e *OrderEventRepositoryMockInsertExpectation) Then(err error) *OrderEventRepositoryMock {
	e.results = &OrderEventRepositoryMockInsertResults{err}
	return e.mock
}

// Times sets number of times OrderEventRepository.Insert should be invoked
func (mmInsert *mOrderEventRepositoryMockInsert) Times(n uint64) *mOrderEventRepositoryMockInsert {
	if n == 0 {
		mmInsert.mock.t.Fatalf("Times of OrderEventRepositoryMock.Insert mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsert.expectedInvocations, n)
	mmInsert.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsert
}

func (mmInsert *mOrderEventRepositoryMockInsert) invocationsDone() bool {
	if len(mmInsert.expectations) == 0 && mmInsert.defaultExpectation == nil && mmInsert.mock.funcInsert == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsert.mock.afterInsertCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsert.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Insert implements mm_service.OrderEventRepository
func (mmInsert *OrderEventRepositoryMock) Insert(ctx context.Context, order *domain.Order) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	mmInsert.t.Helper()

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, order)
	}

	mm_params := OrderEventRepositoryMockInsertParams{ctx, order}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, &mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_want_ptrs := mmInsert.InsertMock.defaultExpectation.paramPtrs

		mm_got := OrderEventRepositoryMockInsertParams{ctx, order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInsert.t.Errorf("OrderEventRepositoryMock.Insert got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmInsert.t.Errorf("OrderEventRepositoryMock.Insert got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("OrderEventRepositoryMock.Insert got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsert.InsertMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the OrderEventRepositoryMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, order)
	}
	mmInsert.t.Fatalf("Unexpected call to OrderEventRepositoryMock.Insert. %v %v", ctx, order)
	return
}

// InsertAfterCounter returns a count of finished OrderEventRepositoryMock.Insert invocations
func (mmInsert *OrderEventRepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of OrderEventRepositoryMock.Insert invocations
func (mmInsert *OrderEventRepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to OrderEventRepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mOrderEventRepositoryMockInsert) Calls() []*OrderEventRepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*OrderEventRepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *OrderEventRepositoryMock) MinimockInsertDone() bool {
	if m.InsertMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertMock.invocationsDone()
}

// MinimockInsertInspect logs each unmet expectation
func (m *OrderEventRepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderEventRepositoryMock.Insert at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertCounter := mm_atomic.LoadUint64(&m.afterInsertCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && afterInsertCounter < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderEventRepositoryMock.Insert at\n%s", m.InsertMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderEventRepositoryMock.Insert at\n%s with params: %#v", m.InsertMock.defaultExpectation.expectationOrigins.origin, *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && afterInsertCounter < 1 {
		m.t.Errorf("Expected call to OrderEventRepositoryMock.Insert at\n%s", m.funcInsertOrigin)
	}

	if !m.InsertMock.invocationsDone() && afterInsertCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderEventRepositoryMock.Insert at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertMock.expectedInvocations), m.InsertMock.expectedInvocationsOrigin, afterInsertCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderEventRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockInsertInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderEventRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderEventRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInsertDone()
}
