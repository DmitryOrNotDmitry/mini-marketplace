// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/service.OrderRepository -o order_repository_mock.go -n OrderRepositoryMock -p mocks

import (
	"context"
	"route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderRepositoryMock implements mm_service.OrderRepository
type OrderRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetByIDOrderItemsBySKU          func(ctx context.Context, orderID int64) (op1 *domain.Order, err error)
	funcGetByIDOrderItemsBySKUOrigin    string
	inspectFuncGetByIDOrderItemsBySKU   func(ctx context.Context, orderID int64)
	afterGetByIDOrderItemsBySKUCounter  uint64
	beforeGetByIDOrderItemsBySKUCounter uint64
	GetByIDOrderItemsBySKUMock          mOrderRepositoryMockGetByIDOrderItemsBySKU

	funcInsert          func(ctx context.Context, order *domain.Order) (i1 int64, err error)
	funcInsertOrigin    string
	inspectFuncInsert   func(ctx context.Context, order *domain.Order)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mOrderRepositoryMockInsert

	funcUpdateStatus          func(ctx context.Context, orderID int64, newStatus domain.Status) (err error)
	funcUpdateStatusOrigin    string
	inspectFuncUpdateStatus   func(ctx context.Context, orderID int64, newStatus domain.Status)
	afterUpdateStatusCounter  uint64
	beforeUpdateStatusCounter uint64
	UpdateStatusMock          mOrderRepositoryMockUpdateStatus
}

// NewOrderRepositoryMock returns a mock for mm_service.OrderRepository
func NewOrderRepositoryMock(t minimock.Tester) *OrderRepositoryMock {
	m := &OrderRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByIDOrderItemsBySKUMock = mOrderRepositoryMockGetByIDOrderItemsBySKU{mock: m}
	m.GetByIDOrderItemsBySKUMock.callArgs = []*OrderRepositoryMockGetByIDOrderItemsBySKUParams{}

	m.InsertMock = mOrderRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*OrderRepositoryMockInsertParams{}

	m.UpdateStatusMock = mOrderRepositoryMockUpdateStatus{mock: m}
	m.UpdateStatusMock.callArgs = []*OrderRepositoryMockUpdateStatusParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderRepositoryMockGetByIDOrderItemsBySKU struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockGetByIDOrderItemsBySKUExpectation
	expectations       []*OrderRepositoryMockGetByIDOrderItemsBySKUExpectation

	callArgs []*OrderRepositoryMockGetByIDOrderItemsBySKUParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockGetByIDOrderItemsBySKUExpectation specifies expectation struct of the OrderRepository.GetByIDOrderItemsBySKU
type OrderRepositoryMockGetByIDOrderItemsBySKUExpectation struct {
	mock               *OrderRepositoryMock
	params             *OrderRepositoryMockGetByIDOrderItemsBySKUParams
	paramPtrs          *OrderRepositoryMockGetByIDOrderItemsBySKUParamPtrs
	expectationOrigins OrderRepositoryMockGetByIDOrderItemsBySKUExpectationOrigins
	results            *OrderRepositoryMockGetByIDOrderItemsBySKUResults
	returnOrigin       string
	Counter            uint64
}

// OrderRepositoryMockGetByIDOrderItemsBySKUParams contains parameters of the OrderRepository.GetByIDOrderItemsBySKU
type OrderRepositoryMockGetByIDOrderItemsBySKUParams struct {
	ctx     context.Context
	orderID int64
}

// OrderRepositoryMockGetByIDOrderItemsBySKUParamPtrs contains pointers to parameters of the OrderRepository.GetByIDOrderItemsBySKU
type OrderRepositoryMockGetByIDOrderItemsBySKUParamPtrs struct {
	ctx     *context.Context
	orderID *int64
}

// OrderRepositoryMockGetByIDOrderItemsBySKUResults contains results of the OrderRepository.GetByIDOrderItemsBySKU
type OrderRepositoryMockGetByIDOrderItemsBySKUResults struct {
	op1 *domain.Order
	err error
}

// OrderRepositoryMockGetByIDOrderItemsBySKUOrigins contains origins of expectations of the OrderRepository.GetByIDOrderItemsBySKU
type OrderRepositoryMockGetByIDOrderItemsBySKUExpectationOrigins struct {
	origin        string
	originCtx     string
	originOrderID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Optional() *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	mmGetByIDOrderItemsBySKU.optional = true
	return mmGetByIDOrderItemsBySKU
}

// Expect sets up expected params for OrderRepository.GetByIDOrderItemsBySKU
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Expect(ctx context.Context, orderID int64) *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	if mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Set")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation = &OrderRepositoryMockGetByIDOrderItemsBySKUExpectation{}
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by ExpectParams functions")
	}

	mmGetByIDOrderItemsBySKU.defaultExpectation.params = &OrderRepositoryMockGetByIDOrderItemsBySKUParams{ctx, orderID}
	mmGetByIDOrderItemsBySKU.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByIDOrderItemsBySKU.expectations {
		if minimock.Equal(e.params, mmGetByIDOrderItemsBySKU.defaultExpectation.params) {
			mmGetByIDOrderItemsBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByIDOrderItemsBySKU.defaultExpectation.params)
		}
	}

	return mmGetByIDOrderItemsBySKU
}

// ExpectCtxParam1 sets up expected param ctx for OrderRepository.GetByIDOrderItemsBySKU
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) ExpectCtxParam1(ctx context.Context) *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	if mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Set")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation = &OrderRepositoryMockGetByIDOrderItemsBySKUExpectation{}
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation.params != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Expect")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs = &OrderRepositoryMockGetByIDOrderItemsBySKUParamPtrs{}
	}
	mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByIDOrderItemsBySKU.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByIDOrderItemsBySKU
}

// ExpectOrderIDParam2 sets up expected param orderID for OrderRepository.GetByIDOrderItemsBySKU
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) ExpectOrderIDParam2(orderID int64) *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	if mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Set")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation = &OrderRepositoryMockGetByIDOrderItemsBySKUExpectation{}
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation.params != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Expect")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs = &OrderRepositoryMockGetByIDOrderItemsBySKUParamPtrs{}
	}
	mmGetByIDOrderItemsBySKU.defaultExpectation.paramPtrs.orderID = &orderID
	mmGetByIDOrderItemsBySKU.defaultExpectation.expectationOrigins.originOrderID = minimock.CallerInfo(1)

	return mmGetByIDOrderItemsBySKU
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.GetByIDOrderItemsBySKU
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Inspect(f func(ctx context.Context, orderID int64)) *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	if mmGetByIDOrderItemsBySKU.mock.inspectFuncGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.GetByIDOrderItemsBySKU")
	}

	mmGetByIDOrderItemsBySKU.mock.inspectFuncGetByIDOrderItemsBySKU = f

	return mmGetByIDOrderItemsBySKU
}

// Return sets up results that will be returned by OrderRepository.GetByIDOrderItemsBySKU
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Return(op1 *domain.Order, err error) *OrderRepositoryMock {
	if mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Set")
	}

	if mmGetByIDOrderItemsBySKU.defaultExpectation == nil {
		mmGetByIDOrderItemsBySKU.defaultExpectation = &OrderRepositoryMockGetByIDOrderItemsBySKUExpectation{mock: mmGetByIDOrderItemsBySKU.mock}
	}
	mmGetByIDOrderItemsBySKU.defaultExpectation.results = &OrderRepositoryMockGetByIDOrderItemsBySKUResults{op1, err}
	mmGetByIDOrderItemsBySKU.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByIDOrderItemsBySKU.mock
}

// Set uses given function f to mock the OrderRepository.GetByIDOrderItemsBySKU method
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Set(f func(ctx context.Context, orderID int64) (op1 *domain.Order, err error)) *OrderRepositoryMock {
	if mmGetByIDOrderItemsBySKU.defaultExpectation != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("Default expectation is already set for the OrderRepository.GetByIDOrderItemsBySKU method")
	}

	if len(mmGetByIDOrderItemsBySKU.expectations) > 0 {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("Some expectations are already set for the OrderRepository.GetByIDOrderItemsBySKU method")
	}

	mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU = f
	mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKUOrigin = minimock.CallerInfo(1)
	return mmGetByIDOrderItemsBySKU.mock
}

// When sets expectation for the OrderRepository.GetByIDOrderItemsBySKU which will trigger the result defined by the following
// Then helper
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) When(ctx context.Context, orderID int64) *OrderRepositoryMockGetByIDOrderItemsBySKUExpectation {
	if mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("OrderRepositoryMock.GetByIDOrderItemsBySKU mock is already set by Set")
	}

	expectation := &OrderRepositoryMockGetByIDOrderItemsBySKUExpectation{
		mock:               mmGetByIDOrderItemsBySKU.mock,
		params:             &OrderRepositoryMockGetByIDOrderItemsBySKUParams{ctx, orderID},
		expectationOrigins: OrderRepositoryMockGetByIDOrderItemsBySKUExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByIDOrderItemsBySKU.expectations = append(mmGetByIDOrderItemsBySKU.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.GetByIDOrderItemsBySKU return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockGetByIDOrderItemsBySKUExpectation) Then(op1 *domain.Order, err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockGetByIDOrderItemsBySKUResults{op1, err}
	return e.mock
}

// Times sets number of times OrderRepository.GetByIDOrderItemsBySKU should be invoked
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Times(n uint64) *mOrderRepositoryMockGetByIDOrderItemsBySKU {
	if n == 0 {
		mmGetByIDOrderItemsBySKU.mock.t.Fatalf("Times of OrderRepositoryMock.GetByIDOrderItemsBySKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByIDOrderItemsBySKU.expectedInvocations, n)
	mmGetByIDOrderItemsBySKU.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByIDOrderItemsBySKU
}

func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) invocationsDone() bool {
	if len(mmGetByIDOrderItemsBySKU.expectations) == 0 && mmGetByIDOrderItemsBySKU.defaultExpectation == nil && mmGetByIDOrderItemsBySKU.mock.funcGetByIDOrderItemsBySKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByIDOrderItemsBySKU.mock.afterGetByIDOrderItemsBySKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByIDOrderItemsBySKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByIDOrderItemsBySKU implements mm_service.OrderRepository
func (mmGetByIDOrderItemsBySKU *OrderRepositoryMock) GetByIDOrderItemsBySKU(ctx context.Context, orderID int64) (op1 *domain.Order, err error) {
	mm_atomic.AddUint64(&mmGetByIDOrderItemsBySKU.beforeGetByIDOrderItemsBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByIDOrderItemsBySKU.afterGetByIDOrderItemsBySKUCounter, 1)

	mmGetByIDOrderItemsBySKU.t.Helper()

	if mmGetByIDOrderItemsBySKU.inspectFuncGetByIDOrderItemsBySKU != nil {
		mmGetByIDOrderItemsBySKU.inspectFuncGetByIDOrderItemsBySKU(ctx, orderID)
	}

	mm_params := OrderRepositoryMockGetByIDOrderItemsBySKUParams{ctx, orderID}

	// Record call args
	mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.mutex.Lock()
	mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.callArgs = append(mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.callArgs, &mm_params)
	mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.mutex.Unlock()

	for _, e := range mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.params
		mm_want_ptrs := mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.paramPtrs

		mm_got := OrderRepositoryMockGetByIDOrderItemsBySKUParams{ctx, orderID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByIDOrderItemsBySKU.t.Errorf("OrderRepositoryMock.GetByIDOrderItemsBySKU got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmGetByIDOrderItemsBySKU.t.Errorf("OrderRepositoryMock.GetByIDOrderItemsBySKU got unexpected parameter orderID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.expectationOrigins.originOrderID, *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByIDOrderItemsBySKU.t.Errorf("OrderRepositoryMock.GetByIDOrderItemsBySKU got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByIDOrderItemsBySKU.GetByIDOrderItemsBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByIDOrderItemsBySKU.t.Fatal("No results are set for the OrderRepositoryMock.GetByIDOrderItemsBySKU")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByIDOrderItemsBySKU.funcGetByIDOrderItemsBySKU != nil {
		return mmGetByIDOrderItemsBySKU.funcGetByIDOrderItemsBySKU(ctx, orderID)
	}
	mmGetByIDOrderItemsBySKU.t.Fatalf("Unexpected call to OrderRepositoryMock.GetByIDOrderItemsBySKU. %v %v", ctx, orderID)
	return
}

// GetByIDOrderItemsBySKUAfterCounter returns a count of finished OrderRepositoryMock.GetByIDOrderItemsBySKU invocations
func (mmGetByIDOrderItemsBySKU *OrderRepositoryMock) GetByIDOrderItemsBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByIDOrderItemsBySKU.afterGetByIDOrderItemsBySKUCounter)
}

// GetByIDOrderItemsBySKUBeforeCounter returns a count of OrderRepositoryMock.GetByIDOrderItemsBySKU invocations
func (mmGetByIDOrderItemsBySKU *OrderRepositoryMock) GetByIDOrderItemsBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByIDOrderItemsBySKU.beforeGetByIDOrderItemsBySKUCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.GetByIDOrderItemsBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByIDOrderItemsBySKU *mOrderRepositoryMockGetByIDOrderItemsBySKU) Calls() []*OrderRepositoryMockGetByIDOrderItemsBySKUParams {
	mmGetByIDOrderItemsBySKU.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockGetByIDOrderItemsBySKUParams, len(mmGetByIDOrderItemsBySKU.callArgs))
	copy(argCopy, mmGetByIDOrderItemsBySKU.callArgs)

	mmGetByIDOrderItemsBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDOrderItemsBySKUDone returns true if the count of the GetByIDOrderItemsBySKU invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockGetByIDOrderItemsBySKUDone() bool {
	if m.GetByIDOrderItemsBySKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByIDOrderItemsBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByIDOrderItemsBySKUMock.invocationsDone()
}

// MinimockGetByIDOrderItemsBySKUInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockGetByIDOrderItemsBySKUInspect() {
	for _, e := range m.GetByIDOrderItemsBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetByIDOrderItemsBySKU at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByIDOrderItemsBySKUCounter := mm_atomic.LoadUint64(&m.afterGetByIDOrderItemsBySKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDOrderItemsBySKUMock.defaultExpectation != nil && afterGetByIDOrderItemsBySKUCounter < 1 {
		if m.GetByIDOrderItemsBySKUMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetByIDOrderItemsBySKU at\n%s", m.GetByIDOrderItemsBySKUMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetByIDOrderItemsBySKU at\n%s with params: %#v", m.GetByIDOrderItemsBySKUMock.defaultExpectation.expectationOrigins.origin, *m.GetByIDOrderItemsBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByIDOrderItemsBySKU != nil && afterGetByIDOrderItemsBySKUCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.GetByIDOrderItemsBySKU at\n%s", m.funcGetByIDOrderItemsBySKUOrigin)
	}

	if !m.GetByIDOrderItemsBySKUMock.invocationsDone() && afterGetByIDOrderItemsBySKUCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.GetByIDOrderItemsBySKU at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByIDOrderItemsBySKUMock.expectedInvocations), m.GetByIDOrderItemsBySKUMock.expectedInvocationsOrigin, afterGetByIDOrderItemsBySKUCounter)
	}
}

type mOrderRepositoryMockInsert struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockInsertExpectation
	expectations       []*OrderRepositoryMockInsertExpectation

	callArgs []*OrderRepositoryMockInsertParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockInsertExpectation specifies expectation struct of the OrderRepository.Insert
type OrderRepositoryMockInsertExpectation struct {
	mock               *OrderRepositoryMock
	params             *OrderRepositoryMockInsertParams
	paramPtrs          *OrderRepositoryMockInsertParamPtrs
	expectationOrigins OrderRepositoryMockInsertExpectationOrigins
	results            *OrderRepositoryMockInsertResults
	returnOrigin       string
	Counter            uint64
}

// OrderRepositoryMockInsertParams contains parameters of the OrderRepository.Insert
type OrderRepositoryMockInsertParams struct {
	ctx   context.Context
	order *domain.Order
}

// OrderRepositoryMockInsertParamPtrs contains pointers to parameters of the OrderRepository.Insert
type OrderRepositoryMockInsertParamPtrs struct {
	ctx   *context.Context
	order **domain.Order
}

// OrderRepositoryMockInsertResults contains results of the OrderRepository.Insert
type OrderRepositoryMockInsertResults struct {
	i1  int64
	err error
}

// OrderRepositoryMockInsertOrigins contains origins of expectations of the OrderRepository.Insert
type OrderRepositoryMockInsertExpectationOrigins struct {
	origin      string
	originCtx   string
	originOrder string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsert *mOrderRepositoryMockInsert) Optional() *mOrderRepositoryMockInsert {
	mmInsert.optional = true
	return mmInsert
}

// Expect sets up expected params for OrderRepository.Insert
func (mmInsert *mOrderRepositoryMockInsert) Expect(ctx context.Context, order *domain.Order) *mOrderRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.paramPtrs != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by ExpectParams functions")
	}

	mmInsert.defaultExpectation.params = &OrderRepositoryMockInsertParams{ctx, order}
	mmInsert.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// ExpectCtxParam1 sets up expected param ctx for OrderRepository.Insert
func (mmInsert *mOrderRepositoryMockInsert) ExpectCtxParam1(ctx context.Context) *mOrderRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &OrderRepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.ctx = &ctx
	mmInsert.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInsert
}

// ExpectOrderParam2 sets up expected param order for OrderRepository.Insert
func (mmInsert *mOrderRepositoryMockInsert) ExpectOrderParam2(order *domain.Order) *mOrderRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderRepositoryMockInsertExpectation{}
	}

	if mmInsert.defaultExpectation.params != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Expect")
	}

	if mmInsert.defaultExpectation.paramPtrs == nil {
		mmInsert.defaultExpectation.paramPtrs = &OrderRepositoryMockInsertParamPtrs{}
	}
	mmInsert.defaultExpectation.paramPtrs.order = &order
	mmInsert.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.Insert
func (mmInsert *mOrderRepositoryMockInsert) Inspect(f func(ctx context.Context, order *domain.Order)) *mOrderRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by OrderRepository.Insert
func (mmInsert *mOrderRepositoryMockInsert) Return(i1 int64, err error) *OrderRepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &OrderRepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &OrderRepositoryMockInsertResults{i1, err}
	mmInsert.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// Set uses given function f to mock the OrderRepository.Insert method
func (mmInsert *mOrderRepositoryMockInsert) Set(f func(ctx context.Context, order *domain.Order) (i1 int64, err error)) *OrderRepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the OrderRepository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the OrderRepository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	mmInsert.mock.funcInsertOrigin = minimock.CallerInfo(1)
	return mmInsert.mock
}

// When sets expectation for the OrderRepository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mOrderRepositoryMockInsert) When(ctx context.Context, order *domain.Order) *OrderRepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("OrderRepositoryMock.Insert mock is already set by Set")
	}

	expectation := &OrderRepositoryMockInsertExpectation{
		mock:               mmInsert.mock,
		params:             &OrderRepositoryMockInsertParams{ctx, order},
		expectationOrigins: OrderRepositoryMockInsertExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.Insert return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockInsertExpectation) Then(i1 int64, err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockInsertResults{i1, err}
	return e.mock
}

// Times sets number of times OrderRepository.Insert should be invoked
func (mmInsert *mOrderRepositoryMockInsert) Times(n uint64) *mOrderRepositoryMockInsert {
	if n == 0 {
		mmInsert.mock.t.Fatalf("Times of OrderRepositoryMock.Insert mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsert.expectedInvocations, n)
	mmInsert.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsert
}

func (mmInsert *mOrderRepositoryMockInsert) invocationsDone() bool {
	if len(mmInsert.expectations) == 0 && mmInsert.defaultExpectation == nil && mmInsert.mock.funcInsert == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsert.mock.afterInsertCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsert.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Insert implements mm_service.OrderRepository
func (mmInsert *OrderRepositoryMock) Insert(ctx context.Context, order *domain.Order) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	mmInsert.t.Helper()

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, order)
	}

	mm_params := OrderRepositoryMockInsertParams{ctx, order}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, &mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_want_ptrs := mmInsert.InsertMock.defaultExpectation.paramPtrs

		mm_got := OrderRepositoryMockInsertParams{ctx, order}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInsert.t.Errorf("OrderRepositoryMock.Insert got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmInsert.t.Errorf("OrderRepositoryMock.Insert got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsert.InsertMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("OrderRepositoryMock.Insert got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsert.InsertMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the OrderRepositoryMock.Insert")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, order)
	}
	mmInsert.t.Fatalf("Unexpected call to OrderRepositoryMock.Insert. %v %v", ctx, order)
	return
}

// InsertAfterCounter returns a count of finished OrderRepositoryMock.Insert invocations
func (mmInsert *OrderRepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of OrderRepositoryMock.Insert invocations
func (mmInsert *OrderRepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mOrderRepositoryMockInsert) Calls() []*OrderRepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockInsertDone() bool {
	if m.InsertMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertMock.invocationsDone()
}

// MinimockInsertInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.Insert at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertCounter := mm_atomic.LoadUint64(&m.afterInsertCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && afterInsertCounter < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderRepositoryMock.Insert at\n%s", m.InsertMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.Insert at\n%s with params: %#v", m.InsertMock.defaultExpectation.expectationOrigins.origin, *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && afterInsertCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.Insert at\n%s", m.funcInsertOrigin)
	}

	if !m.InsertMock.invocationsDone() && afterInsertCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.Insert at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertMock.expectedInvocations), m.InsertMock.expectedInvocationsOrigin, afterInsertCounter)
	}
}

type mOrderRepositoryMockUpdateStatus struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockUpdateStatusExpectation
	expectations       []*OrderRepositoryMockUpdateStatusExpectation

	callArgs []*OrderRepositoryMockUpdateStatusParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockUpdateStatusExpectation specifies expectation struct of the OrderRepository.UpdateStatus
type OrderRepositoryMockUpdateStatusExpectation struct {
	mock               *OrderRepositoryMock
	params             *OrderRepositoryMockUpdateStatusParams
	paramPtrs          *OrderRepositoryMockUpdateStatusParamPtrs
	expectationOrigins OrderRepositoryMockUpdateStatusExpectationOrigins
	results            *OrderRepositoryMockUpdateStatusResults
	returnOrigin       string
	Counter            uint64
}

// OrderRepositoryMockUpdateStatusParams contains parameters of the OrderRepository.UpdateStatus
type OrderRepositoryMockUpdateStatusParams struct {
	ctx       context.Context
	orderID   int64
	newStatus domain.Status
}

// OrderRepositoryMockUpdateStatusParamPtrs contains pointers to parameters of the OrderRepository.UpdateStatus
type OrderRepositoryMockUpdateStatusParamPtrs struct {
	ctx       *context.Context
	orderID   *int64
	newStatus *domain.Status
}

// OrderRepositoryMockUpdateStatusResults contains results of the OrderRepository.UpdateStatus
type OrderRepositoryMockUpdateStatusResults struct {
	err error
}

// OrderRepositoryMockUpdateStatusOrigins contains origins of expectations of the OrderRepository.UpdateStatus
type OrderRepositoryMockUpdateStatusExpectationOrigins struct {
	origin          string
	originCtx       string
	originOrderID   string
	originNewStatus string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Optional() *mOrderRepositoryMockUpdateStatus {
	mmUpdateStatus.optional = true
	return mmUpdateStatus
}

// Expect sets up expected params for OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Expect(ctx context.Context, orderID int64, newStatus domain.Status) *mOrderRepositoryMockUpdateStatus {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	if mmUpdateStatus.defaultExpectation == nil {
		mmUpdateStatus.defaultExpectation = &OrderRepositoryMockUpdateStatusExpectation{}
	}

	if mmUpdateStatus.defaultExpectation.paramPtrs != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by ExpectParams functions")
	}

	mmUpdateStatus.defaultExpectation.params = &OrderRepositoryMockUpdateStatusParams{ctx, orderID, newStatus}
	mmUpdateStatus.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateStatus.expectations {
		if minimock.Equal(e.params, mmUpdateStatus.defaultExpectation.params) {
			mmUpdateStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateStatus.defaultExpectation.params)
		}
	}

	return mmUpdateStatus
}

// ExpectCtxParam1 sets up expected param ctx for OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) ExpectCtxParam1(ctx context.Context) *mOrderRepositoryMockUpdateStatus {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	if mmUpdateStatus.defaultExpectation == nil {
		mmUpdateStatus.defaultExpectation = &OrderRepositoryMockUpdateStatusExpectation{}
	}

	if mmUpdateStatus.defaultExpectation.params != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Expect")
	}

	if mmUpdateStatus.defaultExpectation.paramPtrs == nil {
		mmUpdateStatus.defaultExpectation.paramPtrs = &OrderRepositoryMockUpdateStatusParamPtrs{}
	}
	mmUpdateStatus.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateStatus.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateStatus
}

// ExpectOrderIDParam2 sets up expected param orderID for OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) ExpectOrderIDParam2(orderID int64) *mOrderRepositoryMockUpdateStatus {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	if mmUpdateStatus.defaultExpectation == nil {
		mmUpdateStatus.defaultExpectation = &OrderRepositoryMockUpdateStatusExpectation{}
	}

	if mmUpdateStatus.defaultExpectation.params != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Expect")
	}

	if mmUpdateStatus.defaultExpectation.paramPtrs == nil {
		mmUpdateStatus.defaultExpectation.paramPtrs = &OrderRepositoryMockUpdateStatusParamPtrs{}
	}
	mmUpdateStatus.defaultExpectation.paramPtrs.orderID = &orderID
	mmUpdateStatus.defaultExpectation.expectationOrigins.originOrderID = minimock.CallerInfo(1)

	return mmUpdateStatus
}

// ExpectNewStatusParam3 sets up expected param newStatus for OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) ExpectNewStatusParam3(newStatus domain.Status) *mOrderRepositoryMockUpdateStatus {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	if mmUpdateStatus.defaultExpectation == nil {
		mmUpdateStatus.defaultExpectation = &OrderRepositoryMockUpdateStatusExpectation{}
	}

	if mmUpdateStatus.defaultExpectation.params != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Expect")
	}

	if mmUpdateStatus.defaultExpectation.paramPtrs == nil {
		mmUpdateStatus.defaultExpectation.paramPtrs = &OrderRepositoryMockUpdateStatusParamPtrs{}
	}
	mmUpdateStatus.defaultExpectation.paramPtrs.newStatus = &newStatus
	mmUpdateStatus.defaultExpectation.expectationOrigins.originNewStatus = minimock.CallerInfo(1)

	return mmUpdateStatus
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Inspect(f func(ctx context.Context, orderID int64, newStatus domain.Status)) *mOrderRepositoryMockUpdateStatus {
	if mmUpdateStatus.mock.inspectFuncUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.UpdateStatus")
	}

	mmUpdateStatus.mock.inspectFuncUpdateStatus = f

	return mmUpdateStatus
}

// Return sets up results that will be returned by OrderRepository.UpdateStatus
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Return(err error) *OrderRepositoryMock {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	if mmUpdateStatus.defaultExpectation == nil {
		mmUpdateStatus.defaultExpectation = &OrderRepositoryMockUpdateStatusExpectation{mock: mmUpdateStatus.mock}
	}
	mmUpdateStatus.defaultExpectation.results = &OrderRepositoryMockUpdateStatusResults{err}
	mmUpdateStatus.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateStatus.mock
}

// Set uses given function f to mock the OrderRepository.UpdateStatus method
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Set(f func(ctx context.Context, orderID int64, newStatus domain.Status) (err error)) *OrderRepositoryMock {
	if mmUpdateStatus.defaultExpectation != nil {
		mmUpdateStatus.mock.t.Fatalf("Default expectation is already set for the OrderRepository.UpdateStatus method")
	}

	if len(mmUpdateStatus.expectations) > 0 {
		mmUpdateStatus.mock.t.Fatalf("Some expectations are already set for the OrderRepository.UpdateStatus method")
	}

	mmUpdateStatus.mock.funcUpdateStatus = f
	mmUpdateStatus.mock.funcUpdateStatusOrigin = minimock.CallerInfo(1)
	return mmUpdateStatus.mock
}

// When sets expectation for the OrderRepository.UpdateStatus which will trigger the result defined by the following
// Then helper
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) When(ctx context.Context, orderID int64, newStatus domain.Status) *OrderRepositoryMockUpdateStatusExpectation {
	if mmUpdateStatus.mock.funcUpdateStatus != nil {
		mmUpdateStatus.mock.t.Fatalf("OrderRepositoryMock.UpdateStatus mock is already set by Set")
	}

	expectation := &OrderRepositoryMockUpdateStatusExpectation{
		mock:               mmUpdateStatus.mock,
		params:             &OrderRepositoryMockUpdateStatusParams{ctx, orderID, newStatus},
		expectationOrigins: OrderRepositoryMockUpdateStatusExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateStatus.expectations = append(mmUpdateStatus.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.UpdateStatus return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockUpdateStatusExpectation) Then(err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockUpdateStatusResults{err}
	return e.mock
}

// Times sets number of times OrderRepository.UpdateStatus should be invoked
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Times(n uint64) *mOrderRepositoryMockUpdateStatus {
	if n == 0 {
		mmUpdateStatus.mock.t.Fatalf("Times of OrderRepositoryMock.UpdateStatus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateStatus.expectedInvocations, n)
	mmUpdateStatus.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateStatus
}

func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) invocationsDone() bool {
	if len(mmUpdateStatus.expectations) == 0 && mmUpdateStatus.defaultExpectation == nil && mmUpdateStatus.mock.funcUpdateStatus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateStatus.mock.afterUpdateStatusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateStatus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateStatus implements mm_service.OrderRepository
func (mmUpdateStatus *OrderRepositoryMock) UpdateStatus(ctx context.Context, orderID int64, newStatus domain.Status) (err error) {
	mm_atomic.AddUint64(&mmUpdateStatus.beforeUpdateStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateStatus.afterUpdateStatusCounter, 1)

	mmUpdateStatus.t.Helper()

	if mmUpdateStatus.inspectFuncUpdateStatus != nil {
		mmUpdateStatus.inspectFuncUpdateStatus(ctx, orderID, newStatus)
	}

	mm_params := OrderRepositoryMockUpdateStatusParams{ctx, orderID, newStatus}

	// Record call args
	mmUpdateStatus.UpdateStatusMock.mutex.Lock()
	mmUpdateStatus.UpdateStatusMock.callArgs = append(mmUpdateStatus.UpdateStatusMock.callArgs, &mm_params)
	mmUpdateStatus.UpdateStatusMock.mutex.Unlock()

	for _, e := range mmUpdateStatus.UpdateStatusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateStatus.UpdateStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateStatus.UpdateStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateStatus.UpdateStatusMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateStatus.UpdateStatusMock.defaultExpectation.paramPtrs

		mm_got := OrderRepositoryMockUpdateStatusParams{ctx, orderID, newStatus}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateStatus.t.Errorf("OrderRepositoryMock.UpdateStatus got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateStatus.UpdateStatusMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmUpdateStatus.t.Errorf("OrderRepositoryMock.UpdateStatus got unexpected parameter orderID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateStatus.UpdateStatusMock.defaultExpectation.expectationOrigins.originOrderID, *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

			if mm_want_ptrs.newStatus != nil && !minimock.Equal(*mm_want_ptrs.newStatus, mm_got.newStatus) {
				mmUpdateStatus.t.Errorf("OrderRepositoryMock.UpdateStatus got unexpected parameter newStatus, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateStatus.UpdateStatusMock.defaultExpectation.expectationOrigins.originNewStatus, *mm_want_ptrs.newStatus, mm_got.newStatus, minimock.Diff(*mm_want_ptrs.newStatus, mm_got.newStatus))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateStatus.t.Errorf("OrderRepositoryMock.UpdateStatus got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateStatus.UpdateStatusMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateStatus.UpdateStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateStatus.t.Fatal("No results are set for the OrderRepositoryMock.UpdateStatus")
		}
		return (*mm_results).err
	}
	if mmUpdateStatus.funcUpdateStatus != nil {
		return mmUpdateStatus.funcUpdateStatus(ctx, orderID, newStatus)
	}
	mmUpdateStatus.t.Fatalf("Unexpected call to OrderRepositoryMock.UpdateStatus. %v %v %v", ctx, orderID, newStatus)
	return
}

// UpdateStatusAfterCounter returns a count of finished OrderRepositoryMock.UpdateStatus invocations
func (mmUpdateStatus *OrderRepositoryMock) UpdateStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatus.afterUpdateStatusCounter)
}

// UpdateStatusBeforeCounter returns a count of OrderRepositoryMock.UpdateStatus invocations
func (mmUpdateStatus *OrderRepositoryMock) UpdateStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatus.beforeUpdateStatusCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.UpdateStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateStatus *mOrderRepositoryMockUpdateStatus) Calls() []*OrderRepositoryMockUpdateStatusParams {
	mmUpdateStatus.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockUpdateStatusParams, len(mmUpdateStatus.callArgs))
	copy(argCopy, mmUpdateStatus.callArgs)

	mmUpdateStatus.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateStatusDone returns true if the count of the UpdateStatus invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockUpdateStatusDone() bool {
	if m.UpdateStatusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateStatusMock.invocationsDone()
}

// MinimockUpdateStatusInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockUpdateStatusInspect() {
	for _, e := range m.UpdateStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.UpdateStatus at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateStatusCounter := mm_atomic.LoadUint64(&m.afterUpdateStatusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStatusMock.defaultExpectation != nil && afterUpdateStatusCounter < 1 {
		if m.UpdateStatusMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderRepositoryMock.UpdateStatus at\n%s", m.UpdateStatusMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.UpdateStatus at\n%s with params: %#v", m.UpdateStatusMock.defaultExpectation.expectationOrigins.origin, *m.UpdateStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStatus != nil && afterUpdateStatusCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.UpdateStatus at\n%s", m.funcUpdateStatusOrigin)
	}

	if !m.UpdateStatusMock.invocationsDone() && afterUpdateStatusCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.UpdateStatus at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateStatusMock.expectedInvocations), m.UpdateStatusMock.expectedInvocationsOrigin, afterUpdateStatusCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetByIDOrderItemsBySKUInspect()

			m.MinimockInsertInspect()

			m.MinimockUpdateStatusInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByIDOrderItemsBySKUDone() &&
		m.MinimockInsertDone() &&
		m.MinimockUpdateStatusDone()
}
