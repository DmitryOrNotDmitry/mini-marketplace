// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: stocks/v1/stocks.proto

package stocks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockServiceV1Client is the client API for StockServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceV1Client interface {
	StockInfoV1(ctx context.Context, in *StockInfoRequest, opts ...grpc.CallOption) (*StockInfoResponse, error)
}

type stockServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceV1Client(cc grpc.ClientConnInterface) StockServiceV1Client {
	return &stockServiceV1Client{cc}
}

func (c *stockServiceV1Client) StockInfoV1(ctx context.Context, in *StockInfoRequest, opts ...grpc.CallOption) (*StockInfoResponse, error) {
	out := new(StockInfoResponse)
	err := c.cc.Invoke(ctx, "/StockServiceV1/StockInfoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceV1Server is the server API for StockServiceV1 service.
// All implementations must embed UnimplementedStockServiceV1Server
// for forward compatibility
type StockServiceV1Server interface {
	StockInfoV1(context.Context, *StockInfoRequest) (*StockInfoResponse, error)
	mustEmbedUnimplementedStockServiceV1Server()
}

// UnimplementedStockServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStockServiceV1Server struct {
}

func (UnimplementedStockServiceV1Server) StockInfoV1(context.Context, *StockInfoRequest) (*StockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockInfoV1 not implemented")
}
func (UnimplementedStockServiceV1Server) mustEmbedUnimplementedStockServiceV1Server() {}

// UnsafeStockServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceV1Server will
// result in compilation errors.
type UnsafeStockServiceV1Server interface {
	mustEmbedUnimplementedStockServiceV1Server()
}

func RegisterStockServiceV1Server(s grpc.ServiceRegistrar, srv StockServiceV1Server) {
	s.RegisterService(&StockServiceV1_ServiceDesc, srv)
}

func _StockServiceV1_StockInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceV1Server).StockInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockServiceV1/StockInfoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceV1Server).StockInfoV1(ctx, req.(*StockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockServiceV1_ServiceDesc is the grpc.ServiceDesc for StockServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StockServiceV1",
	HandlerType: (*StockServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockInfoV1",
			Handler:    _StockServiceV1_StockInfoV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks/v1/stocks.proto",
}
