// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package repo_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrder = `-- name: AddOrder :one
insert into orders(user_id, status)
values ($1, $2)
returning order_id
`

type AddOrderParams struct {
	UserID int64
	Status string
}

func (q *Queries) AddOrder(ctx context.Context, arg *AddOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, addOrder, arg.UserID, arg.Status)
	var order_id int64
	err := row.Scan(&order_id)
	return order_id, err
}

const addOrderItem = `-- name: AddOrderItem :exec
insert into order_items(sku, order_id, count)
values ($1, $2, $3)
`

type AddOrderItemParams struct {
	Sku     int64
	OrderID int64
	Count   int64
}

func (q *Queries) AddOrderItem(ctx context.Context, arg *AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem, arg.Sku, arg.OrderID, arg.Count)
	return err
}

const addStock = `-- name: AddStock :exec
insert into stocks(sku, total_count, reserved)
values ($1, $2, $3)
on conflict (sku)
do update
set total_count = stocks.total_count + $2,
    reserved    = stocks.reserved + $3
`

type AddStockParams struct {
	Sku        int64
	TotalCount int64
	Reserved   int64
}

func (q *Queries) AddStock(ctx context.Context, arg *AddStockParams) error {
	_, err := q.db.Exec(ctx, addStock, arg.Sku, arg.TotalCount, arg.Reserved)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
select order_id, user_id, status
from orders
where order_id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, orderID int64) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, orderID)
	var i Order
	err := row.Scan(&i.OrderID, &i.UserID, &i.Status)
	return &i, err
}

const getOrderItemsOrderBySKU = `-- name: GetOrderItemsOrderBySKU :many
select sku, order_id, count
from order_items
where order_id = $1
order by sku
`

type GetOrderItemsOrderBySKURow struct {
	Sku     int64
	OrderID int64
	Count   int64
}

func (q *Queries) GetOrderItemsOrderBySKU(ctx context.Context, orderID int64) ([]*GetOrderItemsOrderBySKURow, error) {
	rows, err := q.db.Query(ctx, getOrderItemsOrderBySKU, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetOrderItemsOrderBySKURow
	for rows.Next() {
		var i GetOrderItemsOrderBySKURow
		if err := rows.Scan(&i.Sku, &i.OrderID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockBySKU = `-- name: GetStockBySKU :one
select sku, total_count, reserved
from stocks
where sku = $1
`

func (q *Queries) GetStockBySKU(ctx context.Context, sku int64) (*Stock, error) {
	row := q.db.QueryRow(ctx, getStockBySKU, sku)
	var i Stock
	err := row.Scan(&i.Sku, &i.TotalCount, &i.Reserved)
	return &i, err
}

const getStockBySKUForUpdate = `-- name: GetStockBySKUForUpdate :one
select sku, total_count, reserved
from stocks
where sku = $1
for update
`

func (q *Queries) GetStockBySKUForUpdate(ctx context.Context, sku int64) (*Stock, error) {
	row := q.db.QueryRow(ctx, getStockBySKUForUpdate, sku)
	var i Stock
	err := row.Scan(&i.Sku, &i.TotalCount, &i.Reserved)
	return &i, err
}

const insertOrderEvent = `-- name: InsertOrderEvent :exec
insert into orders_event_outbox(order_id, status, moment, event_status)
values ($1, $2, $3, $4)
`

type InsertOrderEventParams struct {
	OrderID     *int64
	Status      string
	Moment      pgtype.Timestamp
	EventStatus string
}

func (q *Queries) InsertOrderEvent(ctx context.Context, arg *InsertOrderEventParams) error {
	_, err := q.db.Exec(ctx, insertOrderEvent,
		arg.OrderID,
		arg.Status,
		arg.Moment,
		arg.EventStatus,
	)
	return err
}

const reduceTotalAndReserve = `-- name: ReduceTotalAndReserve :exec
update stocks
set reserved    = reserved - $2,
    total_count = total_count - $2
where sku = $1
`

type ReduceTotalAndReserveParams struct {
	Sku      int64
	Reserved int64
}

func (q *Queries) ReduceTotalAndReserve(ctx context.Context, arg *ReduceTotalAndReserveParams) error {
	_, err := q.db.Exec(ctx, reduceTotalAndReserve, arg.Sku, arg.Reserved)
	return err
}

const removeReserve = `-- name: RemoveReserve :exec
update stocks
set reserved = reserved - $2
where sku = $1
`

type RemoveReserveParams struct {
	Sku      int64
	Reserved int64
}

func (q *Queries) RemoveReserve(ctx context.Context, arg *RemoveReserveParams) error {
	_, err := q.db.Exec(ctx, removeReserve, arg.Sku, arg.Reserved)
	return err
}

const reserve = `-- name: Reserve :exec
update stocks
set reserved = reserved + $2
where sku = $1
`

type ReserveParams struct {
	Sku      int64
	Reserved int64
}

func (q *Queries) Reserve(ctx context.Context, arg *ReserveParams) error {
	_, err := q.db.Exec(ctx, reserve, arg.Sku, arg.Reserved)
	return err
}

const updateStatusByID = `-- name: UpdateStatusByID :exec
update orders
set status = $2
where order_id = $1
`

type UpdateStatusByIDParams struct {
	OrderID int64
	Status  string
}

func (q *Queries) UpdateStatusByID(ctx context.Context, arg *UpdateStatusByIDParams) error {
	_, err := q.db.Exec(ctx, updateStatusByID, arg.OrderID, arg.Status)
	return err
}
