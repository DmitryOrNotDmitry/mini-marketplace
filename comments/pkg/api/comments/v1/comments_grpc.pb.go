// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: comments/v1/comments.proto

package comments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentsServiceV1Client is the client API for CommentsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsServiceV1Client interface {
	AddCommentV1(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	CommentInfoV1(ctx context.Context, in *CommentInfoRequest, opts ...grpc.CallOption) (*CommentInfoResponse, error)
	EditCommentV1(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
	GetCommentsBySKUV1(ctx context.Context, in *GetCommentsBySKURequest, opts ...grpc.CallOption) (*GetCommentsBySKUResponse, error)
	GetCommentsByUserV1(ctx context.Context, in *GetCommentsByUserRequest, opts ...grpc.CallOption) (*GetCommentsByUserResponse, error)
}

type commentsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCommentsServiceV1Client(cc grpc.ClientConnInterface) CommentsServiceV1Client {
	return &commentsServiceV1Client{cc}
}

func (c *commentsServiceV1Client) AddCommentV1(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, "/CommentsServiceV1/AddCommentV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceV1Client) CommentInfoV1(ctx context.Context, in *CommentInfoRequest, opts ...grpc.CallOption) (*CommentInfoResponse, error) {
	out := new(CommentInfoResponse)
	err := c.cc.Invoke(ctx, "/CommentsServiceV1/CommentInfoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceV1Client) EditCommentV1(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	out := new(EditCommentResponse)
	err := c.cc.Invoke(ctx, "/CommentsServiceV1/EditCommentV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceV1Client) GetCommentsBySKUV1(ctx context.Context, in *GetCommentsBySKURequest, opts ...grpc.CallOption) (*GetCommentsBySKUResponse, error) {
	out := new(GetCommentsBySKUResponse)
	err := c.cc.Invoke(ctx, "/CommentsServiceV1/GetCommentsBySKUV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceV1Client) GetCommentsByUserV1(ctx context.Context, in *GetCommentsByUserRequest, opts ...grpc.CallOption) (*GetCommentsByUserResponse, error) {
	out := new(GetCommentsByUserResponse)
	err := c.cc.Invoke(ctx, "/CommentsServiceV1/GetCommentsByUserV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServiceV1Server is the server API for CommentsServiceV1 service.
// All implementations must embed UnimplementedCommentsServiceV1Server
// for forward compatibility
type CommentsServiceV1Server interface {
	AddCommentV1(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	CommentInfoV1(context.Context, *CommentInfoRequest) (*CommentInfoResponse, error)
	EditCommentV1(context.Context, *EditCommentRequest) (*EditCommentResponse, error)
	GetCommentsBySKUV1(context.Context, *GetCommentsBySKURequest) (*GetCommentsBySKUResponse, error)
	GetCommentsByUserV1(context.Context, *GetCommentsByUserRequest) (*GetCommentsByUserResponse, error)
	mustEmbedUnimplementedCommentsServiceV1Server()
}

// UnimplementedCommentsServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCommentsServiceV1Server struct {
}

func (UnimplementedCommentsServiceV1Server) AddCommentV1(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentV1 not implemented")
}
func (UnimplementedCommentsServiceV1Server) CommentInfoV1(context.Context, *CommentInfoRequest) (*CommentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentInfoV1 not implemented")
}
func (UnimplementedCommentsServiceV1Server) EditCommentV1(context.Context, *EditCommentRequest) (*EditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCommentV1 not implemented")
}
func (UnimplementedCommentsServiceV1Server) GetCommentsBySKUV1(context.Context, *GetCommentsBySKURequest) (*GetCommentsBySKUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsBySKUV1 not implemented")
}
func (UnimplementedCommentsServiceV1Server) GetCommentsByUserV1(context.Context, *GetCommentsByUserRequest) (*GetCommentsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByUserV1 not implemented")
}
func (UnimplementedCommentsServiceV1Server) mustEmbedUnimplementedCommentsServiceV1Server() {}

// UnsafeCommentsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServiceV1Server will
// result in compilation errors.
type UnsafeCommentsServiceV1Server interface {
	mustEmbedUnimplementedCommentsServiceV1Server()
}

func RegisterCommentsServiceV1Server(s grpc.ServiceRegistrar, srv CommentsServiceV1Server) {
	s.RegisterService(&CommentsServiceV1_ServiceDesc, srv)
}

func _CommentsServiceV1_AddCommentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceV1Server).AddCommentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommentsServiceV1/AddCommentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceV1Server).AddCommentV1(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsServiceV1_CommentInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceV1Server).CommentInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommentsServiceV1/CommentInfoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceV1Server).CommentInfoV1(ctx, req.(*CommentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsServiceV1_EditCommentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceV1Server).EditCommentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommentsServiceV1/EditCommentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceV1Server).EditCommentV1(ctx, req.(*EditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsServiceV1_GetCommentsBySKUV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsBySKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceV1Server).GetCommentsBySKUV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommentsServiceV1/GetCommentsBySKUV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceV1Server).GetCommentsBySKUV1(ctx, req.(*GetCommentsBySKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsServiceV1_GetCommentsByUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceV1Server).GetCommentsByUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommentsServiceV1/GetCommentsByUserV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceV1Server).GetCommentsByUserV1(ctx, req.(*GetCommentsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsServiceV1_ServiceDesc is the grpc.ServiceDesc for CommentsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommentsServiceV1",
	HandlerType: (*CommentsServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommentV1",
			Handler:    _CommentsServiceV1_AddCommentV1_Handler,
		},
		{
			MethodName: "CommentInfoV1",
			Handler:    _CommentsServiceV1_CommentInfoV1_Handler,
		},
		{
			MethodName: "EditCommentV1",
			Handler:    _CommentsServiceV1_EditCommentV1_Handler,
		},
		{
			MethodName: "GetCommentsBySKUV1",
			Handler:    _CommentsServiceV1_GetCommentsBySKUV1_Handler,
		},
		{
			MethodName: "GetCommentsByUserV1",
			Handler:    _CommentsServiceV1_GetCommentsByUserV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments/v1/comments.proto",
}
