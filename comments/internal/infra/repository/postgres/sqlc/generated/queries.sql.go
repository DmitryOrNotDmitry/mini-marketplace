// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package repo_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addComment = `-- name: AddComment :one
insert into comments(id, user_id, sku, content, created_at)
values (nextval('comment_id_manual_seq') + $1, $2, $3, $4, $5)
returning id
`

type AddCommentParams struct {
	Column1   interface{}
	UserID    int64
	Sku       int64
	Content   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) AddComment(ctx context.Context, arg *AddCommentParams) (int64, error) {
	row := q.db.QueryRow(ctx, addComment,
		arg.Column1,
		arg.UserID,
		arg.Sku,
		arg.Content,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCommentByID = `-- name: GetCommentByID :one
select id, user_id, sku, content, created_at
from comments
where id = $1
`

func (q *Queries) GetCommentByID(ctx context.Context, id int64) (*Comment, error) {
	row := q.db.QueryRow(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Sku,
		&i.Content,
		&i.CreatedAt,
	)
	return &i, err
}

const getCommentByIDForUpdate = `-- name: GetCommentByIDForUpdate :one
select id, user_id, sku, content, created_at
from comments
where id = $1 for update
`

func (q *Queries) GetCommentByIDForUpdate(ctx context.Context, id int64) (*Comment, error) {
	row := q.db.QueryRow(ctx, getCommentByIDForUpdate, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Sku,
		&i.Content,
		&i.CreatedAt,
	)
	return &i, err
}

const getCommentsBySKU = `-- name: GetCommentsBySKU :many
select id, user_id, sku, content, created_at
from comments
where sku = $1
  and (created_at < $2 or (created_at = $2 and user_id > $3))
order by created_at desc, user_id asc
limit $4
`

type GetCommentsBySKUParams struct {
	Sku       int64
	CreatedAt pgtype.Timestamp
	UserID    int64
	Limit     int32
}

func (q *Queries) GetCommentsBySKU(ctx context.Context, arg *GetCommentsBySKUParams) ([]*Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsBySKU,
		arg.Sku,
		arg.CreatedAt,
		arg.UserID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Sku,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUser = `-- name: GetCommentsByUser :many
select id, user_id, sku, content, created_at
from comments
where user_id = $1
`

func (q *Queries) GetCommentsByUser(ctx context.Context, userID int64) ([]*Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Sku,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :exec
update comments
set content = $2
where id = $1
`

type UpdateContentParams struct {
	ID      int64
	Content string
}

func (q *Queries) UpdateContent(ctx context.Context, arg *UpdateContentParams) error {
	_, err := q.db.Exec(ctx, updateContent, arg.ID, arg.Content)
	return err
}
