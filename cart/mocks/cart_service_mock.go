// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/cart/internal/handler.CartService -o cart_service_mock.go -n CartServiceMock -p mocks

import (
	"context"
	"route256/cart/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartServiceMock implements mm_handler.CartService
type CartServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddCartItem          func(ctx context.Context, userID int64, newItem *domain.CartItem) (cp1 *domain.CartItem, err error)
	funcAddCartItemOrigin    string
	inspectFuncAddCartItem   func(ctx context.Context, userID int64, newItem *domain.CartItem)
	afterAddCartItemCounter  uint64
	beforeAddCartItemCounter uint64
	AddCartItemMock          mCartServiceMockAddCartItem

	funcClearCart          func(ctx context.Context, userID int64) (err error)
	funcClearCartOrigin    string
	inspectFuncClearCart   func(ctx context.Context, userID int64)
	afterClearCartCounter  uint64
	beforeClearCartCounter uint64
	ClearCartMock          mCartServiceMockClearCart

	funcDeleteCartItem          func(ctx context.Context, userID int64, skuID int64) (err error)
	funcDeleteCartItemOrigin    string
	inspectFuncDeleteCartItem   func(ctx context.Context, userID int64, skuID int64)
	afterDeleteCartItemCounter  uint64
	beforeDeleteCartItemCounter uint64
	DeleteCartItemMock          mCartServiceMockDeleteCartItem

	funcGetCart          func(ctx context.Context, userID int64) (cp1 *domain.Cart, err error)
	funcGetCartOrigin    string
	inspectFuncGetCart   func(ctx context.Context, userID int64)
	afterGetCartCounter  uint64
	beforeGetCartCounter uint64
	GetCartMock          mCartServiceMockGetCart
}

// NewCartServiceMock returns a mock for mm_handler.CartService
func NewCartServiceMock(t minimock.Tester) *CartServiceMock {
	m := &CartServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddCartItemMock = mCartServiceMockAddCartItem{mock: m}
	m.AddCartItemMock.callArgs = []*CartServiceMockAddCartItemParams{}

	m.ClearCartMock = mCartServiceMockClearCart{mock: m}
	m.ClearCartMock.callArgs = []*CartServiceMockClearCartParams{}

	m.DeleteCartItemMock = mCartServiceMockDeleteCartItem{mock: m}
	m.DeleteCartItemMock.callArgs = []*CartServiceMockDeleteCartItemParams{}

	m.GetCartMock = mCartServiceMockGetCart{mock: m}
	m.GetCartMock.callArgs = []*CartServiceMockGetCartParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCartServiceMockAddCartItem struct {
	optional           bool
	mock               *CartServiceMock
	defaultExpectation *CartServiceMockAddCartItemExpectation
	expectations       []*CartServiceMockAddCartItemExpectation

	callArgs []*CartServiceMockAddCartItemParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartServiceMockAddCartItemExpectation specifies expectation struct of the CartService.AddCartItem
type CartServiceMockAddCartItemExpectation struct {
	mock               *CartServiceMock
	params             *CartServiceMockAddCartItemParams
	paramPtrs          *CartServiceMockAddCartItemParamPtrs
	expectationOrigins CartServiceMockAddCartItemExpectationOrigins
	results            *CartServiceMockAddCartItemResults
	returnOrigin       string
	Counter            uint64
}

// CartServiceMockAddCartItemParams contains parameters of the CartService.AddCartItem
type CartServiceMockAddCartItemParams struct {
	ctx     context.Context
	userID  int64
	newItem *domain.CartItem
}

// CartServiceMockAddCartItemParamPtrs contains pointers to parameters of the CartService.AddCartItem
type CartServiceMockAddCartItemParamPtrs struct {
	ctx     *context.Context
	userID  *int64
	newItem **domain.CartItem
}

// CartServiceMockAddCartItemResults contains results of the CartService.AddCartItem
type CartServiceMockAddCartItemResults struct {
	cp1 *domain.CartItem
	err error
}

// CartServiceMockAddCartItemOrigins contains origins of expectations of the CartService.AddCartItem
type CartServiceMockAddCartItemExpectationOrigins struct {
	origin        string
	originCtx     string
	originUserID  string
	originNewItem string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddCartItem *mCartServiceMockAddCartItem) Optional() *mCartServiceMockAddCartItem {
	mmAddCartItem.optional = true
	return mmAddCartItem
}

// Expect sets up expected params for CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) Expect(ctx context.Context, userID int64, newItem *domain.CartItem) *mCartServiceMockAddCartItem {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	if mmAddCartItem.defaultExpectation == nil {
		mmAddCartItem.defaultExpectation = &CartServiceMockAddCartItemExpectation{}
	}

	if mmAddCartItem.defaultExpectation.paramPtrs != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by ExpectParams functions")
	}

	mmAddCartItem.defaultExpectation.params = &CartServiceMockAddCartItemParams{ctx, userID, newItem}
	mmAddCartItem.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddCartItem.expectations {
		if minimock.Equal(e.params, mmAddCartItem.defaultExpectation.params) {
			mmAddCartItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddCartItem.defaultExpectation.params)
		}
	}

	return mmAddCartItem
}

// ExpectCtxParam1 sets up expected param ctx for CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) ExpectCtxParam1(ctx context.Context) *mCartServiceMockAddCartItem {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	if mmAddCartItem.defaultExpectation == nil {
		mmAddCartItem.defaultExpectation = &CartServiceMockAddCartItemExpectation{}
	}

	if mmAddCartItem.defaultExpectation.params != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Expect")
	}

	if mmAddCartItem.defaultExpectation.paramPtrs == nil {
		mmAddCartItem.defaultExpectation.paramPtrs = &CartServiceMockAddCartItemParamPtrs{}
	}
	mmAddCartItem.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddCartItem.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddCartItem
}

// ExpectUserIDParam2 sets up expected param userID for CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) ExpectUserIDParam2(userID int64) *mCartServiceMockAddCartItem {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	if mmAddCartItem.defaultExpectation == nil {
		mmAddCartItem.defaultExpectation = &CartServiceMockAddCartItemExpectation{}
	}

	if mmAddCartItem.defaultExpectation.params != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Expect")
	}

	if mmAddCartItem.defaultExpectation.paramPtrs == nil {
		mmAddCartItem.defaultExpectation.paramPtrs = &CartServiceMockAddCartItemParamPtrs{}
	}
	mmAddCartItem.defaultExpectation.paramPtrs.userID = &userID
	mmAddCartItem.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmAddCartItem
}

// ExpectNewItemParam3 sets up expected param newItem for CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) ExpectNewItemParam3(newItem *domain.CartItem) *mCartServiceMockAddCartItem {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	if mmAddCartItem.defaultExpectation == nil {
		mmAddCartItem.defaultExpectation = &CartServiceMockAddCartItemExpectation{}
	}

	if mmAddCartItem.defaultExpectation.params != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Expect")
	}

	if mmAddCartItem.defaultExpectation.paramPtrs == nil {
		mmAddCartItem.defaultExpectation.paramPtrs = &CartServiceMockAddCartItemParamPtrs{}
	}
	mmAddCartItem.defaultExpectation.paramPtrs.newItem = &newItem
	mmAddCartItem.defaultExpectation.expectationOrigins.originNewItem = minimock.CallerInfo(1)

	return mmAddCartItem
}

// Inspect accepts an inspector function that has same arguments as the CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) Inspect(f func(ctx context.Context, userID int64, newItem *domain.CartItem)) *mCartServiceMockAddCartItem {
	if mmAddCartItem.mock.inspectFuncAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("Inspect function is already set for CartServiceMock.AddCartItem")
	}

	mmAddCartItem.mock.inspectFuncAddCartItem = f

	return mmAddCartItem
}

// Return sets up results that will be returned by CartService.AddCartItem
func (mmAddCartItem *mCartServiceMockAddCartItem) Return(cp1 *domain.CartItem, err error) *CartServiceMock {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	if mmAddCartItem.defaultExpectation == nil {
		mmAddCartItem.defaultExpectation = &CartServiceMockAddCartItemExpectation{mock: mmAddCartItem.mock}
	}
	mmAddCartItem.defaultExpectation.results = &CartServiceMockAddCartItemResults{cp1, err}
	mmAddCartItem.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddCartItem.mock
}

// Set uses given function f to mock the CartService.AddCartItem method
func (mmAddCartItem *mCartServiceMockAddCartItem) Set(f func(ctx context.Context, userID int64, newItem *domain.CartItem) (cp1 *domain.CartItem, err error)) *CartServiceMock {
	if mmAddCartItem.defaultExpectation != nil {
		mmAddCartItem.mock.t.Fatalf("Default expectation is already set for the CartService.AddCartItem method")
	}

	if len(mmAddCartItem.expectations) > 0 {
		mmAddCartItem.mock.t.Fatalf("Some expectations are already set for the CartService.AddCartItem method")
	}

	mmAddCartItem.mock.funcAddCartItem = f
	mmAddCartItem.mock.funcAddCartItemOrigin = minimock.CallerInfo(1)
	return mmAddCartItem.mock
}

// When sets expectation for the CartService.AddCartItem which will trigger the result defined by the following
// Then helper
func (mmAddCartItem *mCartServiceMockAddCartItem) When(ctx context.Context, userID int64, newItem *domain.CartItem) *CartServiceMockAddCartItemExpectation {
	if mmAddCartItem.mock.funcAddCartItem != nil {
		mmAddCartItem.mock.t.Fatalf("CartServiceMock.AddCartItem mock is already set by Set")
	}

	expectation := &CartServiceMockAddCartItemExpectation{
		mock:               mmAddCartItem.mock,
		params:             &CartServiceMockAddCartItemParams{ctx, userID, newItem},
		expectationOrigins: CartServiceMockAddCartItemExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddCartItem.expectations = append(mmAddCartItem.expectations, expectation)
	return expectation
}

// Then sets up CartService.AddCartItem return parameters for the expectation previously defined by the When method
func (e *CartServiceMockAddCartItemExpectation) Then(cp1 *domain.CartItem, err error) *CartServiceMock {
	e.results = &CartServiceMockAddCartItemResults{cp1, err}
	return e.mock
}

// Times sets number of times CartService.AddCartItem should be invoked
func (mmAddCartItem *mCartServiceMockAddCartItem) Times(n uint64) *mCartServiceMockAddCartItem {
	if n == 0 {
		mmAddCartItem.mock.t.Fatalf("Times of CartServiceMock.AddCartItem mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddCartItem.expectedInvocations, n)
	mmAddCartItem.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddCartItem
}

func (mmAddCartItem *mCartServiceMockAddCartItem) invocationsDone() bool {
	if len(mmAddCartItem.expectations) == 0 && mmAddCartItem.defaultExpectation == nil && mmAddCartItem.mock.funcAddCartItem == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddCartItem.mock.afterAddCartItemCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddCartItem.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddCartItem implements mm_handler.CartService
func (mmAddCartItem *CartServiceMock) AddCartItem(ctx context.Context, userID int64, newItem *domain.CartItem) (cp1 *domain.CartItem, err error) {
	mm_atomic.AddUint64(&mmAddCartItem.beforeAddCartItemCounter, 1)
	defer mm_atomic.AddUint64(&mmAddCartItem.afterAddCartItemCounter, 1)

	mmAddCartItem.t.Helper()

	if mmAddCartItem.inspectFuncAddCartItem != nil {
		mmAddCartItem.inspectFuncAddCartItem(ctx, userID, newItem)
	}

	mm_params := CartServiceMockAddCartItemParams{ctx, userID, newItem}

	// Record call args
	mmAddCartItem.AddCartItemMock.mutex.Lock()
	mmAddCartItem.AddCartItemMock.callArgs = append(mmAddCartItem.AddCartItemMock.callArgs, &mm_params)
	mmAddCartItem.AddCartItemMock.mutex.Unlock()

	for _, e := range mmAddCartItem.AddCartItemMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmAddCartItem.AddCartItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddCartItem.AddCartItemMock.defaultExpectation.Counter, 1)
		mm_want := mmAddCartItem.AddCartItemMock.defaultExpectation.params
		mm_want_ptrs := mmAddCartItem.AddCartItemMock.defaultExpectation.paramPtrs

		mm_got := CartServiceMockAddCartItemParams{ctx, userID, newItem}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddCartItem.t.Errorf("CartServiceMock.AddCartItem got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddCartItem.AddCartItemMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmAddCartItem.t.Errorf("CartServiceMock.AddCartItem got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddCartItem.AddCartItemMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.newItem != nil && !minimock.Equal(*mm_want_ptrs.newItem, mm_got.newItem) {
				mmAddCartItem.t.Errorf("CartServiceMock.AddCartItem got unexpected parameter newItem, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddCartItem.AddCartItemMock.defaultExpectation.expectationOrigins.originNewItem, *mm_want_ptrs.newItem, mm_got.newItem, minimock.Diff(*mm_want_ptrs.newItem, mm_got.newItem))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddCartItem.t.Errorf("CartServiceMock.AddCartItem got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddCartItem.AddCartItemMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddCartItem.AddCartItemMock.defaultExpectation.results
		if mm_results == nil {
			mmAddCartItem.t.Fatal("No results are set for the CartServiceMock.AddCartItem")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmAddCartItem.funcAddCartItem != nil {
		return mmAddCartItem.funcAddCartItem(ctx, userID, newItem)
	}
	mmAddCartItem.t.Fatalf("Unexpected call to CartServiceMock.AddCartItem. %v %v %v", ctx, userID, newItem)
	return
}

// AddCartItemAfterCounter returns a count of finished CartServiceMock.AddCartItem invocations
func (mmAddCartItem *CartServiceMock) AddCartItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddCartItem.afterAddCartItemCounter)
}

// AddCartItemBeforeCounter returns a count of CartServiceMock.AddCartItem invocations
func (mmAddCartItem *CartServiceMock) AddCartItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddCartItem.beforeAddCartItemCounter)
}

// Calls returns a list of arguments used in each call to CartServiceMock.AddCartItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddCartItem *mCartServiceMockAddCartItem) Calls() []*CartServiceMockAddCartItemParams {
	mmAddCartItem.mutex.RLock()

	argCopy := make([]*CartServiceMockAddCartItemParams, len(mmAddCartItem.callArgs))
	copy(argCopy, mmAddCartItem.callArgs)

	mmAddCartItem.mutex.RUnlock()

	return argCopy
}

// MinimockAddCartItemDone returns true if the count of the AddCartItem invocations corresponds
// the number of defined expectations
func (m *CartServiceMock) MinimockAddCartItemDone() bool {
	if m.AddCartItemMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddCartItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddCartItemMock.invocationsDone()
}

// MinimockAddCartItemInspect logs each unmet expectation
func (m *CartServiceMock) MinimockAddCartItemInspect() {
	for _, e := range m.AddCartItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartServiceMock.AddCartItem at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddCartItemCounter := mm_atomic.LoadUint64(&m.afterAddCartItemCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddCartItemMock.defaultExpectation != nil && afterAddCartItemCounter < 1 {
		if m.AddCartItemMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartServiceMock.AddCartItem at\n%s", m.AddCartItemMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartServiceMock.AddCartItem at\n%s with params: %#v", m.AddCartItemMock.defaultExpectation.expectationOrigins.origin, *m.AddCartItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddCartItem != nil && afterAddCartItemCounter < 1 {
		m.t.Errorf("Expected call to CartServiceMock.AddCartItem at\n%s", m.funcAddCartItemOrigin)
	}

	if !m.AddCartItemMock.invocationsDone() && afterAddCartItemCounter > 0 {
		m.t.Errorf("Expected %d calls to CartServiceMock.AddCartItem at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddCartItemMock.expectedInvocations), m.AddCartItemMock.expectedInvocationsOrigin, afterAddCartItemCounter)
	}
}

type mCartServiceMockClearCart struct {
	optional           bool
	mock               *CartServiceMock
	defaultExpectation *CartServiceMockClearCartExpectation
	expectations       []*CartServiceMockClearCartExpectation

	callArgs []*CartServiceMockClearCartParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartServiceMockClearCartExpectation specifies expectation struct of the CartService.ClearCart
type CartServiceMockClearCartExpectation struct {
	mock               *CartServiceMock
	params             *CartServiceMockClearCartParams
	paramPtrs          *CartServiceMockClearCartParamPtrs
	expectationOrigins CartServiceMockClearCartExpectationOrigins
	results            *CartServiceMockClearCartResults
	returnOrigin       string
	Counter            uint64
}

// CartServiceMockClearCartParams contains parameters of the CartService.ClearCart
type CartServiceMockClearCartParams struct {
	ctx    context.Context
	userID int64
}

// CartServiceMockClearCartParamPtrs contains pointers to parameters of the CartService.ClearCart
type CartServiceMockClearCartParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CartServiceMockClearCartResults contains results of the CartService.ClearCart
type CartServiceMockClearCartResults struct {
	err error
}

// CartServiceMockClearCartOrigins contains origins of expectations of the CartService.ClearCart
type CartServiceMockClearCartExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClearCart *mCartServiceMockClearCart) Optional() *mCartServiceMockClearCart {
	mmClearCart.optional = true
	return mmClearCart
}

// Expect sets up expected params for CartService.ClearCart
func (mmClearCart *mCartServiceMockClearCart) Expect(ctx context.Context, userID int64) *mCartServiceMockClearCart {
	if mmClearCart.mock.funcClearCart != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Set")
	}

	if mmClearCart.defaultExpectation == nil {
		mmClearCart.defaultExpectation = &CartServiceMockClearCartExpectation{}
	}

	if mmClearCart.defaultExpectation.paramPtrs != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by ExpectParams functions")
	}

	mmClearCart.defaultExpectation.params = &CartServiceMockClearCartParams{ctx, userID}
	mmClearCart.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmClearCart.expectations {
		if minimock.Equal(e.params, mmClearCart.defaultExpectation.params) {
			mmClearCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmClearCart.defaultExpectation.params)
		}
	}

	return mmClearCart
}

// ExpectCtxParam1 sets up expected param ctx for CartService.ClearCart
func (mmClearCart *mCartServiceMockClearCart) ExpectCtxParam1(ctx context.Context) *mCartServiceMockClearCart {
	if mmClearCart.mock.funcClearCart != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Set")
	}

	if mmClearCart.defaultExpectation == nil {
		mmClearCart.defaultExpectation = &CartServiceMockClearCartExpectation{}
	}

	if mmClearCart.defaultExpectation.params != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Expect")
	}

	if mmClearCart.defaultExpectation.paramPtrs == nil {
		mmClearCart.defaultExpectation.paramPtrs = &CartServiceMockClearCartParamPtrs{}
	}
	mmClearCart.defaultExpectation.paramPtrs.ctx = &ctx
	mmClearCart.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmClearCart
}

// ExpectUserIDParam2 sets up expected param userID for CartService.ClearCart
func (mmClearCart *mCartServiceMockClearCart) ExpectUserIDParam2(userID int64) *mCartServiceMockClearCart {
	if mmClearCart.mock.funcClearCart != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Set")
	}

	if mmClearCart.defaultExpectation == nil {
		mmClearCart.defaultExpectation = &CartServiceMockClearCartExpectation{}
	}

	if mmClearCart.defaultExpectation.params != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Expect")
	}

	if mmClearCart.defaultExpectation.paramPtrs == nil {
		mmClearCart.defaultExpectation.paramPtrs = &CartServiceMockClearCartParamPtrs{}
	}
	mmClearCart.defaultExpectation.paramPtrs.userID = &userID
	mmClearCart.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmClearCart
}

// Inspect accepts an inspector function that has same arguments as the CartService.ClearCart
func (mmClearCart *mCartServiceMockClearCart) Inspect(f func(ctx context.Context, userID int64)) *mCartServiceMockClearCart {
	if mmClearCart.mock.inspectFuncClearCart != nil {
		mmClearCart.mock.t.Fatalf("Inspect function is already set for CartServiceMock.ClearCart")
	}

	mmClearCart.mock.inspectFuncClearCart = f

	return mmClearCart
}

// Return sets up results that will be returned by CartService.ClearCart
func (mmClearCart *mCartServiceMockClearCart) Return(err error) *CartServiceMock {
	if mmClearCart.mock.funcClearCart != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Set")
	}

	if mmClearCart.defaultExpectation == nil {
		mmClearCart.defaultExpectation = &CartServiceMockClearCartExpectation{mock: mmClearCart.mock}
	}
	mmClearCart.defaultExpectation.results = &CartServiceMockClearCartResults{err}
	mmClearCart.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmClearCart.mock
}

// Set uses given function f to mock the CartService.ClearCart method
func (mmClearCart *mCartServiceMockClearCart) Set(f func(ctx context.Context, userID int64) (err error)) *CartServiceMock {
	if mmClearCart.defaultExpectation != nil {
		mmClearCart.mock.t.Fatalf("Default expectation is already set for the CartService.ClearCart method")
	}

	if len(mmClearCart.expectations) > 0 {
		mmClearCart.mock.t.Fatalf("Some expectations are already set for the CartService.ClearCart method")
	}

	mmClearCart.mock.funcClearCart = f
	mmClearCart.mock.funcClearCartOrigin = minimock.CallerInfo(1)
	return mmClearCart.mock
}

// When sets expectation for the CartService.ClearCart which will trigger the result defined by the following
// Then helper
func (mmClearCart *mCartServiceMockClearCart) When(ctx context.Context, userID int64) *CartServiceMockClearCartExpectation {
	if mmClearCart.mock.funcClearCart != nil {
		mmClearCart.mock.t.Fatalf("CartServiceMock.ClearCart mock is already set by Set")
	}

	expectation := &CartServiceMockClearCartExpectation{
		mock:               mmClearCart.mock,
		params:             &CartServiceMockClearCartParams{ctx, userID},
		expectationOrigins: CartServiceMockClearCartExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmClearCart.expectations = append(mmClearCart.expectations, expectation)
	return expectation
}

// Then sets up CartService.ClearCart return parameters for the expectation previously defined by the When method
func (e *CartServiceMockClearCartExpectation) Then(err error) *CartServiceMock {
	e.results = &CartServiceMockClearCartResults{err}
	return e.mock
}

// Times sets number of times CartService.ClearCart should be invoked
func (mmClearCart *mCartServiceMockClearCart) Times(n uint64) *mCartServiceMockClearCart {
	if n == 0 {
		mmClearCart.mock.t.Fatalf("Times of CartServiceMock.ClearCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClearCart.expectedInvocations, n)
	mmClearCart.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmClearCart
}

func (mmClearCart *mCartServiceMockClearCart) invocationsDone() bool {
	if len(mmClearCart.expectations) == 0 && mmClearCart.defaultExpectation == nil && mmClearCart.mock.funcClearCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClearCart.mock.afterClearCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClearCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ClearCart implements mm_handler.CartService
func (mmClearCart *CartServiceMock) ClearCart(ctx context.Context, userID int64) (err error) {
	mm_atomic.AddUint64(&mmClearCart.beforeClearCartCounter, 1)
	defer mm_atomic.AddUint64(&mmClearCart.afterClearCartCounter, 1)

	mmClearCart.t.Helper()

	if mmClearCart.inspectFuncClearCart != nil {
		mmClearCart.inspectFuncClearCart(ctx, userID)
	}

	mm_params := CartServiceMockClearCartParams{ctx, userID}

	// Record call args
	mmClearCart.ClearCartMock.mutex.Lock()
	mmClearCart.ClearCartMock.callArgs = append(mmClearCart.ClearCartMock.callArgs, &mm_params)
	mmClearCart.ClearCartMock.mutex.Unlock()

	for _, e := range mmClearCart.ClearCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmClearCart.ClearCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClearCart.ClearCartMock.defaultExpectation.Counter, 1)
		mm_want := mmClearCart.ClearCartMock.defaultExpectation.params
		mm_want_ptrs := mmClearCart.ClearCartMock.defaultExpectation.paramPtrs

		mm_got := CartServiceMockClearCartParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmClearCart.t.Errorf("CartServiceMock.ClearCart got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmClearCart.ClearCartMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmClearCart.t.Errorf("CartServiceMock.ClearCart got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmClearCart.ClearCartMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmClearCart.t.Errorf("CartServiceMock.ClearCart got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmClearCart.ClearCartMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmClearCart.ClearCartMock.defaultExpectation.results
		if mm_results == nil {
			mmClearCart.t.Fatal("No results are set for the CartServiceMock.ClearCart")
		}
		return (*mm_results).err
	}
	if mmClearCart.funcClearCart != nil {
		return mmClearCart.funcClearCart(ctx, userID)
	}
	mmClearCart.t.Fatalf("Unexpected call to CartServiceMock.ClearCart. %v %v", ctx, userID)
	return
}

// ClearCartAfterCounter returns a count of finished CartServiceMock.ClearCart invocations
func (mmClearCart *CartServiceMock) ClearCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClearCart.afterClearCartCounter)
}

// ClearCartBeforeCounter returns a count of CartServiceMock.ClearCart invocations
func (mmClearCart *CartServiceMock) ClearCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClearCart.beforeClearCartCounter)
}

// Calls returns a list of arguments used in each call to CartServiceMock.ClearCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmClearCart *mCartServiceMockClearCart) Calls() []*CartServiceMockClearCartParams {
	mmClearCart.mutex.RLock()

	argCopy := make([]*CartServiceMockClearCartParams, len(mmClearCart.callArgs))
	copy(argCopy, mmClearCart.callArgs)

	mmClearCart.mutex.RUnlock()

	return argCopy
}

// MinimockClearCartDone returns true if the count of the ClearCart invocations corresponds
// the number of defined expectations
func (m *CartServiceMock) MinimockClearCartDone() bool {
	if m.ClearCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ClearCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ClearCartMock.invocationsDone()
}

// MinimockClearCartInspect logs each unmet expectation
func (m *CartServiceMock) MinimockClearCartInspect() {
	for _, e := range m.ClearCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartServiceMock.ClearCart at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterClearCartCounter := mm_atomic.LoadUint64(&m.afterClearCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ClearCartMock.defaultExpectation != nil && afterClearCartCounter < 1 {
		if m.ClearCartMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartServiceMock.ClearCart at\n%s", m.ClearCartMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartServiceMock.ClearCart at\n%s with params: %#v", m.ClearCartMock.defaultExpectation.expectationOrigins.origin, *m.ClearCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClearCart != nil && afterClearCartCounter < 1 {
		m.t.Errorf("Expected call to CartServiceMock.ClearCart at\n%s", m.funcClearCartOrigin)
	}

	if !m.ClearCartMock.invocationsDone() && afterClearCartCounter > 0 {
		m.t.Errorf("Expected %d calls to CartServiceMock.ClearCart at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ClearCartMock.expectedInvocations), m.ClearCartMock.expectedInvocationsOrigin, afterClearCartCounter)
	}
}

type mCartServiceMockDeleteCartItem struct {
	optional           bool
	mock               *CartServiceMock
	defaultExpectation *CartServiceMockDeleteCartItemExpectation
	expectations       []*CartServiceMockDeleteCartItemExpectation

	callArgs []*CartServiceMockDeleteCartItemParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartServiceMockDeleteCartItemExpectation specifies expectation struct of the CartService.DeleteCartItem
type CartServiceMockDeleteCartItemExpectation struct {
	mock               *CartServiceMock
	params             *CartServiceMockDeleteCartItemParams
	paramPtrs          *CartServiceMockDeleteCartItemParamPtrs
	expectationOrigins CartServiceMockDeleteCartItemExpectationOrigins
	results            *CartServiceMockDeleteCartItemResults
	returnOrigin       string
	Counter            uint64
}

// CartServiceMockDeleteCartItemParams contains parameters of the CartService.DeleteCartItem
type CartServiceMockDeleteCartItemParams struct {
	ctx    context.Context
	userID int64
	skuID  int64
}

// CartServiceMockDeleteCartItemParamPtrs contains pointers to parameters of the CartService.DeleteCartItem
type CartServiceMockDeleteCartItemParamPtrs struct {
	ctx    *context.Context
	userID *int64
	skuID  *int64
}

// CartServiceMockDeleteCartItemResults contains results of the CartService.DeleteCartItem
type CartServiceMockDeleteCartItemResults struct {
	err error
}

// CartServiceMockDeleteCartItemOrigins contains origins of expectations of the CartService.DeleteCartItem
type CartServiceMockDeleteCartItemExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
	originSkuID  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Optional() *mCartServiceMockDeleteCartItem {
	mmDeleteCartItem.optional = true
	return mmDeleteCartItem
}

// Expect sets up expected params for CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Expect(ctx context.Context, userID int64, skuID int64) *mCartServiceMockDeleteCartItem {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	if mmDeleteCartItem.defaultExpectation == nil {
		mmDeleteCartItem.defaultExpectation = &CartServiceMockDeleteCartItemExpectation{}
	}

	if mmDeleteCartItem.defaultExpectation.paramPtrs != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by ExpectParams functions")
	}

	mmDeleteCartItem.defaultExpectation.params = &CartServiceMockDeleteCartItemParams{ctx, userID, skuID}
	mmDeleteCartItem.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteCartItem.expectations {
		if minimock.Equal(e.params, mmDeleteCartItem.defaultExpectation.params) {
			mmDeleteCartItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteCartItem.defaultExpectation.params)
		}
	}

	return mmDeleteCartItem
}

// ExpectCtxParam1 sets up expected param ctx for CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) ExpectCtxParam1(ctx context.Context) *mCartServiceMockDeleteCartItem {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	if mmDeleteCartItem.defaultExpectation == nil {
		mmDeleteCartItem.defaultExpectation = &CartServiceMockDeleteCartItemExpectation{}
	}

	if mmDeleteCartItem.defaultExpectation.params != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Expect")
	}

	if mmDeleteCartItem.defaultExpectation.paramPtrs == nil {
		mmDeleteCartItem.defaultExpectation.paramPtrs = &CartServiceMockDeleteCartItemParamPtrs{}
	}
	mmDeleteCartItem.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteCartItem.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteCartItem
}

// ExpectUserIDParam2 sets up expected param userID for CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) ExpectUserIDParam2(userID int64) *mCartServiceMockDeleteCartItem {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	if mmDeleteCartItem.defaultExpectation == nil {
		mmDeleteCartItem.defaultExpectation = &CartServiceMockDeleteCartItemExpectation{}
	}

	if mmDeleteCartItem.defaultExpectation.params != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Expect")
	}

	if mmDeleteCartItem.defaultExpectation.paramPtrs == nil {
		mmDeleteCartItem.defaultExpectation.paramPtrs = &CartServiceMockDeleteCartItemParamPtrs{}
	}
	mmDeleteCartItem.defaultExpectation.paramPtrs.userID = &userID
	mmDeleteCartItem.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmDeleteCartItem
}

// ExpectSkuIDParam3 sets up expected param skuID for CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) ExpectSkuIDParam3(skuID int64) *mCartServiceMockDeleteCartItem {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	if mmDeleteCartItem.defaultExpectation == nil {
		mmDeleteCartItem.defaultExpectation = &CartServiceMockDeleteCartItemExpectation{}
	}

	if mmDeleteCartItem.defaultExpectation.params != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Expect")
	}

	if mmDeleteCartItem.defaultExpectation.paramPtrs == nil {
		mmDeleteCartItem.defaultExpectation.paramPtrs = &CartServiceMockDeleteCartItemParamPtrs{}
	}
	mmDeleteCartItem.defaultExpectation.paramPtrs.skuID = &skuID
	mmDeleteCartItem.defaultExpectation.expectationOrigins.originSkuID = minimock.CallerInfo(1)

	return mmDeleteCartItem
}

// Inspect accepts an inspector function that has same arguments as the CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Inspect(f func(ctx context.Context, userID int64, skuID int64)) *mCartServiceMockDeleteCartItem {
	if mmDeleteCartItem.mock.inspectFuncDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("Inspect function is already set for CartServiceMock.DeleteCartItem")
	}

	mmDeleteCartItem.mock.inspectFuncDeleteCartItem = f

	return mmDeleteCartItem
}

// Return sets up results that will be returned by CartService.DeleteCartItem
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Return(err error) *CartServiceMock {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	if mmDeleteCartItem.defaultExpectation == nil {
		mmDeleteCartItem.defaultExpectation = &CartServiceMockDeleteCartItemExpectation{mock: mmDeleteCartItem.mock}
	}
	mmDeleteCartItem.defaultExpectation.results = &CartServiceMockDeleteCartItemResults{err}
	mmDeleteCartItem.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteCartItem.mock
}

// Set uses given function f to mock the CartService.DeleteCartItem method
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Set(f func(ctx context.Context, userID int64, skuID int64) (err error)) *CartServiceMock {
	if mmDeleteCartItem.defaultExpectation != nil {
		mmDeleteCartItem.mock.t.Fatalf("Default expectation is already set for the CartService.DeleteCartItem method")
	}

	if len(mmDeleteCartItem.expectations) > 0 {
		mmDeleteCartItem.mock.t.Fatalf("Some expectations are already set for the CartService.DeleteCartItem method")
	}

	mmDeleteCartItem.mock.funcDeleteCartItem = f
	mmDeleteCartItem.mock.funcDeleteCartItemOrigin = minimock.CallerInfo(1)
	return mmDeleteCartItem.mock
}

// When sets expectation for the CartService.DeleteCartItem which will trigger the result defined by the following
// Then helper
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) When(ctx context.Context, userID int64, skuID int64) *CartServiceMockDeleteCartItemExpectation {
	if mmDeleteCartItem.mock.funcDeleteCartItem != nil {
		mmDeleteCartItem.mock.t.Fatalf("CartServiceMock.DeleteCartItem mock is already set by Set")
	}

	expectation := &CartServiceMockDeleteCartItemExpectation{
		mock:               mmDeleteCartItem.mock,
		params:             &CartServiceMockDeleteCartItemParams{ctx, userID, skuID},
		expectationOrigins: CartServiceMockDeleteCartItemExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteCartItem.expectations = append(mmDeleteCartItem.expectations, expectation)
	return expectation
}

// Then sets up CartService.DeleteCartItem return parameters for the expectation previously defined by the When method
func (e *CartServiceMockDeleteCartItemExpectation) Then(err error) *CartServiceMock {
	e.results = &CartServiceMockDeleteCartItemResults{err}
	return e.mock
}

// Times sets number of times CartService.DeleteCartItem should be invoked
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Times(n uint64) *mCartServiceMockDeleteCartItem {
	if n == 0 {
		mmDeleteCartItem.mock.t.Fatalf("Times of CartServiceMock.DeleteCartItem mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteCartItem.expectedInvocations, n)
	mmDeleteCartItem.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteCartItem
}

func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) invocationsDone() bool {
	if len(mmDeleteCartItem.expectations) == 0 && mmDeleteCartItem.defaultExpectation == nil && mmDeleteCartItem.mock.funcDeleteCartItem == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteCartItem.mock.afterDeleteCartItemCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteCartItem.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteCartItem implements mm_handler.CartService
func (mmDeleteCartItem *CartServiceMock) DeleteCartItem(ctx context.Context, userID int64, skuID int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteCartItem.beforeDeleteCartItemCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteCartItem.afterDeleteCartItemCounter, 1)

	mmDeleteCartItem.t.Helper()

	if mmDeleteCartItem.inspectFuncDeleteCartItem != nil {
		mmDeleteCartItem.inspectFuncDeleteCartItem(ctx, userID, skuID)
	}

	mm_params := CartServiceMockDeleteCartItemParams{ctx, userID, skuID}

	// Record call args
	mmDeleteCartItem.DeleteCartItemMock.mutex.Lock()
	mmDeleteCartItem.DeleteCartItemMock.callArgs = append(mmDeleteCartItem.DeleteCartItemMock.callArgs, &mm_params)
	mmDeleteCartItem.DeleteCartItemMock.mutex.Unlock()

	for _, e := range mmDeleteCartItem.DeleteCartItemMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteCartItem.DeleteCartItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.paramPtrs

		mm_got := CartServiceMockDeleteCartItemParams{ctx, userID, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteCartItem.t.Errorf("CartServiceMock.DeleteCartItem got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmDeleteCartItem.t.Errorf("CartServiceMock.DeleteCartItem got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmDeleteCartItem.t.Errorf("CartServiceMock.DeleteCartItem got unexpected parameter skuID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.expectationOrigins.originSkuID, *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteCartItem.t.Errorf("CartServiceMock.DeleteCartItem got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteCartItem.DeleteCartItemMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteCartItem.t.Fatal("No results are set for the CartServiceMock.DeleteCartItem")
		}
		return (*mm_results).err
	}
	if mmDeleteCartItem.funcDeleteCartItem != nil {
		return mmDeleteCartItem.funcDeleteCartItem(ctx, userID, skuID)
	}
	mmDeleteCartItem.t.Fatalf("Unexpected call to CartServiceMock.DeleteCartItem. %v %v %v", ctx, userID, skuID)
	return
}

// DeleteCartItemAfterCounter returns a count of finished CartServiceMock.DeleteCartItem invocations
func (mmDeleteCartItem *CartServiceMock) DeleteCartItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteCartItem.afterDeleteCartItemCounter)
}

// DeleteCartItemBeforeCounter returns a count of CartServiceMock.DeleteCartItem invocations
func (mmDeleteCartItem *CartServiceMock) DeleteCartItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteCartItem.beforeDeleteCartItemCounter)
}

// Calls returns a list of arguments used in each call to CartServiceMock.DeleteCartItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteCartItem *mCartServiceMockDeleteCartItem) Calls() []*CartServiceMockDeleteCartItemParams {
	mmDeleteCartItem.mutex.RLock()

	argCopy := make([]*CartServiceMockDeleteCartItemParams, len(mmDeleteCartItem.callArgs))
	copy(argCopy, mmDeleteCartItem.callArgs)

	mmDeleteCartItem.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteCartItemDone returns true if the count of the DeleteCartItem invocations corresponds
// the number of defined expectations
func (m *CartServiceMock) MinimockDeleteCartItemDone() bool {
	if m.DeleteCartItemMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteCartItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteCartItemMock.invocationsDone()
}

// MinimockDeleteCartItemInspect logs each unmet expectation
func (m *CartServiceMock) MinimockDeleteCartItemInspect() {
	for _, e := range m.DeleteCartItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartServiceMock.DeleteCartItem at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCartItemCounter := mm_atomic.LoadUint64(&m.afterDeleteCartItemCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteCartItemMock.defaultExpectation != nil && afterDeleteCartItemCounter < 1 {
		if m.DeleteCartItemMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartServiceMock.DeleteCartItem at\n%s", m.DeleteCartItemMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartServiceMock.DeleteCartItem at\n%s with params: %#v", m.DeleteCartItemMock.defaultExpectation.expectationOrigins.origin, *m.DeleteCartItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteCartItem != nil && afterDeleteCartItemCounter < 1 {
		m.t.Errorf("Expected call to CartServiceMock.DeleteCartItem at\n%s", m.funcDeleteCartItemOrigin)
	}

	if !m.DeleteCartItemMock.invocationsDone() && afterDeleteCartItemCounter > 0 {
		m.t.Errorf("Expected %d calls to CartServiceMock.DeleteCartItem at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteCartItemMock.expectedInvocations), m.DeleteCartItemMock.expectedInvocationsOrigin, afterDeleteCartItemCounter)
	}
}

type mCartServiceMockGetCart struct {
	optional           bool
	mock               *CartServiceMock
	defaultExpectation *CartServiceMockGetCartExpectation
	expectations       []*CartServiceMockGetCartExpectation

	callArgs []*CartServiceMockGetCartParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartServiceMockGetCartExpectation specifies expectation struct of the CartService.GetCart
type CartServiceMockGetCartExpectation struct {
	mock               *CartServiceMock
	params             *CartServiceMockGetCartParams
	paramPtrs          *CartServiceMockGetCartParamPtrs
	expectationOrigins CartServiceMockGetCartExpectationOrigins
	results            *CartServiceMockGetCartResults
	returnOrigin       string
	Counter            uint64
}

// CartServiceMockGetCartParams contains parameters of the CartService.GetCart
type CartServiceMockGetCartParams struct {
	ctx    context.Context
	userID int64
}

// CartServiceMockGetCartParamPtrs contains pointers to parameters of the CartService.GetCart
type CartServiceMockGetCartParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CartServiceMockGetCartResults contains results of the CartService.GetCart
type CartServiceMockGetCartResults struct {
	cp1 *domain.Cart
	err error
}

// CartServiceMockGetCartOrigins contains origins of expectations of the CartService.GetCart
type CartServiceMockGetCartExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCart *mCartServiceMockGetCart) Optional() *mCartServiceMockGetCart {
	mmGetCart.optional = true
	return mmGetCart
}

// Expect sets up expected params for CartService.GetCart
func (mmGetCart *mCartServiceMockGetCart) Expect(ctx context.Context, userID int64) *mCartServiceMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartServiceMockGetCartExpectation{}
	}

	if mmGetCart.defaultExpectation.paramPtrs != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by ExpectParams functions")
	}

	mmGetCart.defaultExpectation.params = &CartServiceMockGetCartParams{ctx, userID}
	mmGetCart.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCart.expectations {
		if minimock.Equal(e.params, mmGetCart.defaultExpectation.params) {
			mmGetCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCart.defaultExpectation.params)
		}
	}

	return mmGetCart
}

// ExpectCtxParam1 sets up expected param ctx for CartService.GetCart
func (mmGetCart *mCartServiceMockGetCart) ExpectCtxParam1(ctx context.Context) *mCartServiceMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartServiceMockGetCartExpectation{}
	}

	if mmGetCart.defaultExpectation.params != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Expect")
	}

	if mmGetCart.defaultExpectation.paramPtrs == nil {
		mmGetCart.defaultExpectation.paramPtrs = &CartServiceMockGetCartParamPtrs{}
	}
	mmGetCart.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCart.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCart
}

// ExpectUserIDParam2 sets up expected param userID for CartService.GetCart
func (mmGetCart *mCartServiceMockGetCart) ExpectUserIDParam2(userID int64) *mCartServiceMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartServiceMockGetCartExpectation{}
	}

	if mmGetCart.defaultExpectation.params != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Expect")
	}

	if mmGetCart.defaultExpectation.paramPtrs == nil {
		mmGetCart.defaultExpectation.paramPtrs = &CartServiceMockGetCartParamPtrs{}
	}
	mmGetCart.defaultExpectation.paramPtrs.userID = &userID
	mmGetCart.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGetCart
}

// Inspect accepts an inspector function that has same arguments as the CartService.GetCart
func (mmGetCart *mCartServiceMockGetCart) Inspect(f func(ctx context.Context, userID int64)) *mCartServiceMockGetCart {
	if mmGetCart.mock.inspectFuncGetCart != nil {
		mmGetCart.mock.t.Fatalf("Inspect function is already set for CartServiceMock.GetCart")
	}

	mmGetCart.mock.inspectFuncGetCart = f

	return mmGetCart
}

// Return sets up results that will be returned by CartService.GetCart
func (mmGetCart *mCartServiceMockGetCart) Return(cp1 *domain.Cart, err error) *CartServiceMock {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartServiceMockGetCartExpectation{mock: mmGetCart.mock}
	}
	mmGetCart.defaultExpectation.results = &CartServiceMockGetCartResults{cp1, err}
	mmGetCart.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCart.mock
}

// Set uses given function f to mock the CartService.GetCart method
func (mmGetCart *mCartServiceMockGetCart) Set(f func(ctx context.Context, userID int64) (cp1 *domain.Cart, err error)) *CartServiceMock {
	if mmGetCart.defaultExpectation != nil {
		mmGetCart.mock.t.Fatalf("Default expectation is already set for the CartService.GetCart method")
	}

	if len(mmGetCart.expectations) > 0 {
		mmGetCart.mock.t.Fatalf("Some expectations are already set for the CartService.GetCart method")
	}

	mmGetCart.mock.funcGetCart = f
	mmGetCart.mock.funcGetCartOrigin = minimock.CallerInfo(1)
	return mmGetCart.mock
}

// When sets expectation for the CartService.GetCart which will trigger the result defined by the following
// Then helper
func (mmGetCart *mCartServiceMockGetCart) When(ctx context.Context, userID int64) *CartServiceMockGetCartExpectation {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartServiceMock.GetCart mock is already set by Set")
	}

	expectation := &CartServiceMockGetCartExpectation{
		mock:               mmGetCart.mock,
		params:             &CartServiceMockGetCartParams{ctx, userID},
		expectationOrigins: CartServiceMockGetCartExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCart.expectations = append(mmGetCart.expectations, expectation)
	return expectation
}

// Then sets up CartService.GetCart return parameters for the expectation previously defined by the When method
func (e *CartServiceMockGetCartExpectation) Then(cp1 *domain.Cart, err error) *CartServiceMock {
	e.results = &CartServiceMockGetCartResults{cp1, err}
	return e.mock
}

// Times sets number of times CartService.GetCart should be invoked
func (mmGetCart *mCartServiceMockGetCart) Times(n uint64) *mCartServiceMockGetCart {
	if n == 0 {
		mmGetCart.mock.t.Fatalf("Times of CartServiceMock.GetCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCart.expectedInvocations, n)
	mmGetCart.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCart
}

func (mmGetCart *mCartServiceMockGetCart) invocationsDone() bool {
	if len(mmGetCart.expectations) == 0 && mmGetCart.defaultExpectation == nil && mmGetCart.mock.funcGetCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCart.mock.afterGetCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCart implements mm_handler.CartService
func (mmGetCart *CartServiceMock) GetCart(ctx context.Context, userID int64) (cp1 *domain.Cart, err error) {
	mm_atomic.AddUint64(&mmGetCart.beforeGetCartCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCart.afterGetCartCounter, 1)

	mmGetCart.t.Helper()

	if mmGetCart.inspectFuncGetCart != nil {
		mmGetCart.inspectFuncGetCart(ctx, userID)
	}

	mm_params := CartServiceMockGetCartParams{ctx, userID}

	// Record call args
	mmGetCart.GetCartMock.mutex.Lock()
	mmGetCart.GetCartMock.callArgs = append(mmGetCart.GetCartMock.callArgs, &mm_params)
	mmGetCart.GetCartMock.mutex.Unlock()

	for _, e := range mmGetCart.GetCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetCart.GetCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCart.GetCartMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCart.GetCartMock.defaultExpectation.params
		mm_want_ptrs := mmGetCart.GetCartMock.defaultExpectation.paramPtrs

		mm_got := CartServiceMockGetCartParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCart.t.Errorf("CartServiceMock.GetCart got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCart.GetCartMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGetCart.t.Errorf("CartServiceMock.GetCart got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCart.GetCartMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCart.t.Errorf("CartServiceMock.GetCart got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCart.GetCartMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCart.GetCartMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCart.t.Fatal("No results are set for the CartServiceMock.GetCart")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetCart.funcGetCart != nil {
		return mmGetCart.funcGetCart(ctx, userID)
	}
	mmGetCart.t.Fatalf("Unexpected call to CartServiceMock.GetCart. %v %v", ctx, userID)
	return
}

// GetCartAfterCounter returns a count of finished CartServiceMock.GetCart invocations
func (mmGetCart *CartServiceMock) GetCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.afterGetCartCounter)
}

// GetCartBeforeCounter returns a count of CartServiceMock.GetCart invocations
func (mmGetCart *CartServiceMock) GetCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.beforeGetCartCounter)
}

// Calls returns a list of arguments used in each call to CartServiceMock.GetCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCart *mCartServiceMockGetCart) Calls() []*CartServiceMockGetCartParams {
	mmGetCart.mutex.RLock()

	argCopy := make([]*CartServiceMockGetCartParams, len(mmGetCart.callArgs))
	copy(argCopy, mmGetCart.callArgs)

	mmGetCart.mutex.RUnlock()

	return argCopy
}

// MinimockGetCartDone returns true if the count of the GetCart invocations corresponds
// the number of defined expectations
func (m *CartServiceMock) MinimockGetCartDone() bool {
	if m.GetCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCartMock.invocationsDone()
}

// MinimockGetCartInspect logs each unmet expectation
func (m *CartServiceMock) MinimockGetCartInspect() {
	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartServiceMock.GetCart at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCartCounter := mm_atomic.LoadUint64(&m.afterGetCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartMock.defaultExpectation != nil && afterGetCartCounter < 1 {
		if m.GetCartMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartServiceMock.GetCart at\n%s", m.GetCartMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartServiceMock.GetCart at\n%s with params: %#v", m.GetCartMock.defaultExpectation.expectationOrigins.origin, *m.GetCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCart != nil && afterGetCartCounter < 1 {
		m.t.Errorf("Expected call to CartServiceMock.GetCart at\n%s", m.funcGetCartOrigin)
	}

	if !m.GetCartMock.invocationsDone() && afterGetCartCounter > 0 {
		m.t.Errorf("Expected %d calls to CartServiceMock.GetCart at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCartMock.expectedInvocations), m.GetCartMock.expectedInvocationsOrigin, afterGetCartCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddCartItemInspect()

			m.MinimockClearCartInspect()

			m.MinimockDeleteCartItemInspect()

			m.MinimockGetCartInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddCartItemDone() &&
		m.MinimockClearCartDone() &&
		m.MinimockDeleteCartItemDone() &&
		m.MinimockGetCartDone()
}
