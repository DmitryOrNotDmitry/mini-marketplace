// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/pkg/api/stocks/v1.StockServiceClient -o stock_service_client_mock.go -n StockServiceClientMock -p mocks

import (
	context "context"
	mm_stocks "route256/loms/pkg/api/stocks/v1"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	grpc "google.golang.org/grpc"
)

// StockServiceClientMock implements mm_stocks.StockServiceClient
type StockServiceClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStockInfo          func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error)
	funcStockInfoOrigin    string
	inspectFuncStockInfo   func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption)
	afterStockInfoCounter  uint64
	beforeStockInfoCounter uint64
	StockInfoMock          mStockServiceClientMockStockInfo
}

// NewStockServiceClientMock returns a mock for mm_stocks.StockServiceClient
func NewStockServiceClientMock(t minimock.Tester) *StockServiceClientMock {
	m := &StockServiceClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StockInfoMock = mStockServiceClientMockStockInfo{mock: m}
	m.StockInfoMock.callArgs = []*StockServiceClientMockStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockServiceClientMockStockInfo struct {
	optional           bool
	mock               *StockServiceClientMock
	defaultExpectation *StockServiceClientMockStockInfoExpectation
	expectations       []*StockServiceClientMockStockInfoExpectation

	callArgs []*StockServiceClientMockStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockServiceClientMockStockInfoExpectation specifies expectation struct of the StockServiceClient.StockInfo
type StockServiceClientMockStockInfoExpectation struct {
	mock               *StockServiceClientMock
	params             *StockServiceClientMockStockInfoParams
	paramPtrs          *StockServiceClientMockStockInfoParamPtrs
	expectationOrigins StockServiceClientMockStockInfoExpectationOrigins
	results            *StockServiceClientMockStockInfoResults
	returnOrigin       string
	Counter            uint64
}

// StockServiceClientMockStockInfoParams contains parameters of the StockServiceClient.StockInfo
type StockServiceClientMockStockInfoParams struct {
	ctx  context.Context
	in   *mm_stocks.StockInfoRequest
	opts []grpc.CallOption
}

// StockServiceClientMockStockInfoParamPtrs contains pointers to parameters of the StockServiceClient.StockInfo
type StockServiceClientMockStockInfoParamPtrs struct {
	ctx  *context.Context
	in   **mm_stocks.StockInfoRequest
	opts *[]grpc.CallOption
}

// StockServiceClientMockStockInfoResults contains results of the StockServiceClient.StockInfo
type StockServiceClientMockStockInfoResults struct {
	sp1 *mm_stocks.StockInfoResponse
	err error
}

// StockServiceClientMockStockInfoOrigins contains origins of expectations of the StockServiceClient.StockInfo
type StockServiceClientMockStockInfoExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStockInfo *mStockServiceClientMockStockInfo) Optional() *mStockServiceClientMockStockInfo {
	mmStockInfo.optional = true
	return mmStockInfo
}

// Expect sets up expected params for StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) Expect(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) *mStockServiceClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &StockServiceClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.paramPtrs != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by ExpectParams functions")
	}

	mmStockInfo.defaultExpectation.params = &StockServiceClientMockStockInfoParams{ctx, in, opts}
	mmStockInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStockInfo.expectations {
		if minimock.Equal(e.params, mmStockInfo.defaultExpectation.params) {
			mmStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStockInfo.defaultExpectation.params)
		}
	}

	return mmStockInfo
}

// ExpectCtxParam1 sets up expected param ctx for StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) ExpectCtxParam1(ctx context.Context) *mStockServiceClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &StockServiceClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &StockServiceClientMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmStockInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmStockInfo
}

// ExpectInParam2 sets up expected param in for StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) ExpectInParam2(in *mm_stocks.StockInfoRequest) *mStockServiceClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &StockServiceClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &StockServiceClientMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.in = &in
	mmStockInfo.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmStockInfo
}

// ExpectOptsParam3 sets up expected param opts for StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) ExpectOptsParam3(opts ...grpc.CallOption) *mStockServiceClientMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &StockServiceClientMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &StockServiceClientMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.opts = &opts
	mmStockInfo.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmStockInfo
}

// Inspect accepts an inspector function that has same arguments as the StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) Inspect(f func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption)) *mStockServiceClientMockStockInfo {
	if mmStockInfo.mock.inspectFuncStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("Inspect function is already set for StockServiceClientMock.StockInfo")
	}

	mmStockInfo.mock.inspectFuncStockInfo = f

	return mmStockInfo
}

// Return sets up results that will be returned by StockServiceClient.StockInfo
func (mmStockInfo *mStockServiceClientMockStockInfo) Return(sp1 *mm_stocks.StockInfoResponse, err error) *StockServiceClientMock {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &StockServiceClientMockStockInfoExpectation{mock: mmStockInfo.mock}
	}
	mmStockInfo.defaultExpectation.results = &StockServiceClientMockStockInfoResults{sp1, err}
	mmStockInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStockInfo.mock
}

// Set uses given function f to mock the StockServiceClient.StockInfo method
func (mmStockInfo *mStockServiceClientMockStockInfo) Set(f func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error)) *StockServiceClientMock {
	if mmStockInfo.defaultExpectation != nil {
		mmStockInfo.mock.t.Fatalf("Default expectation is already set for the StockServiceClient.StockInfo method")
	}

	if len(mmStockInfo.expectations) > 0 {
		mmStockInfo.mock.t.Fatalf("Some expectations are already set for the StockServiceClient.StockInfo method")
	}

	mmStockInfo.mock.funcStockInfo = f
	mmStockInfo.mock.funcStockInfoOrigin = minimock.CallerInfo(1)
	return mmStockInfo.mock
}

// When sets expectation for the StockServiceClient.StockInfo which will trigger the result defined by the following
// Then helper
func (mmStockInfo *mStockServiceClientMockStockInfo) When(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) *StockServiceClientMockStockInfoExpectation {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("StockServiceClientMock.StockInfo mock is already set by Set")
	}

	expectation := &StockServiceClientMockStockInfoExpectation{
		mock:               mmStockInfo.mock,
		params:             &StockServiceClientMockStockInfoParams{ctx, in, opts},
		expectationOrigins: StockServiceClientMockStockInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStockInfo.expectations = append(mmStockInfo.expectations, expectation)
	return expectation
}

// Then sets up StockServiceClient.StockInfo return parameters for the expectation previously defined by the When method
func (e *StockServiceClientMockStockInfoExpectation) Then(sp1 *mm_stocks.StockInfoResponse, err error) *StockServiceClientMock {
	e.results = &StockServiceClientMockStockInfoResults{sp1, err}
	return e.mock
}

// Times sets number of times StockServiceClient.StockInfo should be invoked
func (mmStockInfo *mStockServiceClientMockStockInfo) Times(n uint64) *mStockServiceClientMockStockInfo {
	if n == 0 {
		mmStockInfo.mock.t.Fatalf("Times of StockServiceClientMock.StockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStockInfo.expectedInvocations, n)
	mmStockInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStockInfo
}

func (mmStockInfo *mStockServiceClientMockStockInfo) invocationsDone() bool {
	if len(mmStockInfo.expectations) == 0 && mmStockInfo.defaultExpectation == nil && mmStockInfo.mock.funcStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStockInfo.mock.afterStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StockInfo implements mm_stocks.StockServiceClient
func (mmStockInfo *StockServiceClientMock) StockInfo(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error) {
	mm_atomic.AddUint64(&mmStockInfo.beforeStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStockInfo.afterStockInfoCounter, 1)

	mmStockInfo.t.Helper()

	if mmStockInfo.inspectFuncStockInfo != nil {
		mmStockInfo.inspectFuncStockInfo(ctx, in, opts...)
	}

	mm_params := StockServiceClientMockStockInfoParams{ctx, in, opts}

	// Record call args
	mmStockInfo.StockInfoMock.mutex.Lock()
	mmStockInfo.StockInfoMock.callArgs = append(mmStockInfo.StockInfoMock.callArgs, &mm_params)
	mmStockInfo.StockInfoMock.mutex.Unlock()

	for _, e := range mmStockInfo.StockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStockInfo.StockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStockInfo.StockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStockInfo.StockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStockInfo.StockInfoMock.defaultExpectation.paramPtrs

		mm_got := StockServiceClientMockStockInfoParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStockInfo.t.Errorf("StockServiceClientMock.StockInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfo.StockInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmStockInfo.t.Errorf("StockServiceClientMock.StockInfo got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfo.StockInfoMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmStockInfo.t.Errorf("StockServiceClientMock.StockInfo got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfo.StockInfoMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStockInfo.t.Errorf("StockServiceClientMock.StockInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStockInfo.StockInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStockInfo.StockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStockInfo.t.Fatal("No results are set for the StockServiceClientMock.StockInfo")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStockInfo.funcStockInfo != nil {
		return mmStockInfo.funcStockInfo(ctx, in, opts...)
	}
	mmStockInfo.t.Fatalf("Unexpected call to StockServiceClientMock.StockInfo. %v %v %v", ctx, in, opts)
	return
}

// StockInfoAfterCounter returns a count of finished StockServiceClientMock.StockInfo invocations
func (mmStockInfo *StockServiceClientMock) StockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.afterStockInfoCounter)
}

// StockInfoBeforeCounter returns a count of StockServiceClientMock.StockInfo invocations
func (mmStockInfo *StockServiceClientMock) StockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.beforeStockInfoCounter)
}

// Calls returns a list of arguments used in each call to StockServiceClientMock.StockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStockInfo *mStockServiceClientMockStockInfo) Calls() []*StockServiceClientMockStockInfoParams {
	mmStockInfo.mutex.RLock()

	argCopy := make([]*StockServiceClientMockStockInfoParams, len(mmStockInfo.callArgs))
	copy(argCopy, mmStockInfo.callArgs)

	mmStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStockInfoDone returns true if the count of the StockInfo invocations corresponds
// the number of defined expectations
func (m *StockServiceClientMock) MinimockStockInfoDone() bool {
	if m.StockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StockInfoMock.invocationsDone()
}

// MinimockStockInfoInspect logs each unmet expectation
func (m *StockServiceClientMock) MinimockStockInfoInspect() {
	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceClientMock.StockInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStockInfoCounter := mm_atomic.LoadUint64(&m.afterStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StockInfoMock.defaultExpectation != nil && afterStockInfoCounter < 1 {
		if m.StockInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockServiceClientMock.StockInfo at\n%s", m.StockInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockServiceClientMock.StockInfo at\n%s with params: %#v", m.StockInfoMock.defaultExpectation.expectationOrigins.origin, *m.StockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStockInfo != nil && afterStockInfoCounter < 1 {
		m.t.Errorf("Expected call to StockServiceClientMock.StockInfo at\n%s", m.funcStockInfoOrigin)
	}

	if !m.StockInfoMock.invocationsDone() && afterStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceClientMock.StockInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StockInfoMock.expectedInvocations), m.StockInfoMock.expectedInvocationsOrigin, afterStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockServiceClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStockInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStockInfoDone()
}
