// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/pkg/api/stocks/v1.StockServiceV1Client -o stock_service_v1_client_mock.go -n StockServiceV1ClientMock -p mocks

import (
	context "context"
	mm_stocks "route256/loms/pkg/api/stocks/v1"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	grpc "google.golang.org/grpc"
)

// StockServiceV1ClientMock implements mm_stocks.StockServiceV1Client
type StockServiceV1ClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStockInfoV1          func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error)
	funcStockInfoV1Origin    string
	inspectFuncStockInfoV1   func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption)
	afterStockInfoV1Counter  uint64
	beforeStockInfoV1Counter uint64
	StockInfoV1Mock          mStockServiceV1ClientMockStockInfoV1
}

// NewStockServiceV1ClientMock returns a mock for mm_stocks.StockServiceV1Client
func NewStockServiceV1ClientMock(t minimock.Tester) *StockServiceV1ClientMock {
	m := &StockServiceV1ClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StockInfoV1Mock = mStockServiceV1ClientMockStockInfoV1{mock: m}
	m.StockInfoV1Mock.callArgs = []*StockServiceV1ClientMockStockInfoV1Params{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockServiceV1ClientMockStockInfoV1 struct {
	optional           bool
	mock               *StockServiceV1ClientMock
	defaultExpectation *StockServiceV1ClientMockStockInfoV1Expectation
	expectations       []*StockServiceV1ClientMockStockInfoV1Expectation

	callArgs []*StockServiceV1ClientMockStockInfoV1Params
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockServiceV1ClientMockStockInfoV1Expectation specifies expectation struct of the StockServiceV1Client.StockInfoV1
type StockServiceV1ClientMockStockInfoV1Expectation struct {
	mock               *StockServiceV1ClientMock
	params             *StockServiceV1ClientMockStockInfoV1Params
	paramPtrs          *StockServiceV1ClientMockStockInfoV1ParamPtrs
	expectationOrigins StockServiceV1ClientMockStockInfoV1ExpectationOrigins
	results            *StockServiceV1ClientMockStockInfoV1Results
	returnOrigin       string
	Counter            uint64
}

// StockServiceV1ClientMockStockInfoV1Params contains parameters of the StockServiceV1Client.StockInfoV1
type StockServiceV1ClientMockStockInfoV1Params struct {
	ctx  context.Context
	in   *mm_stocks.StockInfoRequest
	opts []grpc.CallOption
}

// StockServiceV1ClientMockStockInfoV1ParamPtrs contains pointers to parameters of the StockServiceV1Client.StockInfoV1
type StockServiceV1ClientMockStockInfoV1ParamPtrs struct {
	ctx  *context.Context
	in   **mm_stocks.StockInfoRequest
	opts *[]grpc.CallOption
}

// StockServiceV1ClientMockStockInfoV1Results contains results of the StockServiceV1Client.StockInfoV1
type StockServiceV1ClientMockStockInfoV1Results struct {
	sp1 *mm_stocks.StockInfoResponse
	err error
}

// StockServiceV1ClientMockStockInfoV1Origins contains origins of expectations of the StockServiceV1Client.StockInfoV1
type StockServiceV1ClientMockStockInfoV1ExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Optional() *mStockServiceV1ClientMockStockInfoV1 {
	mmStockInfoV1.optional = true
	return mmStockInfoV1
}

// Expect sets up expected params for StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Expect(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) *mStockServiceV1ClientMockStockInfoV1 {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	if mmStockInfoV1.defaultExpectation == nil {
		mmStockInfoV1.defaultExpectation = &StockServiceV1ClientMockStockInfoV1Expectation{}
	}

	if mmStockInfoV1.defaultExpectation.paramPtrs != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by ExpectParams functions")
	}

	mmStockInfoV1.defaultExpectation.params = &StockServiceV1ClientMockStockInfoV1Params{ctx, in, opts}
	mmStockInfoV1.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStockInfoV1.expectations {
		if minimock.Equal(e.params, mmStockInfoV1.defaultExpectation.params) {
			mmStockInfoV1.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStockInfoV1.defaultExpectation.params)
		}
	}

	return mmStockInfoV1
}

// ExpectCtxParam1 sets up expected param ctx for StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) ExpectCtxParam1(ctx context.Context) *mStockServiceV1ClientMockStockInfoV1 {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	if mmStockInfoV1.defaultExpectation == nil {
		mmStockInfoV1.defaultExpectation = &StockServiceV1ClientMockStockInfoV1Expectation{}
	}

	if mmStockInfoV1.defaultExpectation.params != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Expect")
	}

	if mmStockInfoV1.defaultExpectation.paramPtrs == nil {
		mmStockInfoV1.defaultExpectation.paramPtrs = &StockServiceV1ClientMockStockInfoV1ParamPtrs{}
	}
	mmStockInfoV1.defaultExpectation.paramPtrs.ctx = &ctx
	mmStockInfoV1.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmStockInfoV1
}

// ExpectInParam2 sets up expected param in for StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) ExpectInParam2(in *mm_stocks.StockInfoRequest) *mStockServiceV1ClientMockStockInfoV1 {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	if mmStockInfoV1.defaultExpectation == nil {
		mmStockInfoV1.defaultExpectation = &StockServiceV1ClientMockStockInfoV1Expectation{}
	}

	if mmStockInfoV1.defaultExpectation.params != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Expect")
	}

	if mmStockInfoV1.defaultExpectation.paramPtrs == nil {
		mmStockInfoV1.defaultExpectation.paramPtrs = &StockServiceV1ClientMockStockInfoV1ParamPtrs{}
	}
	mmStockInfoV1.defaultExpectation.paramPtrs.in = &in
	mmStockInfoV1.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmStockInfoV1
}

// ExpectOptsParam3 sets up expected param opts for StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) ExpectOptsParam3(opts ...grpc.CallOption) *mStockServiceV1ClientMockStockInfoV1 {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	if mmStockInfoV1.defaultExpectation == nil {
		mmStockInfoV1.defaultExpectation = &StockServiceV1ClientMockStockInfoV1Expectation{}
	}

	if mmStockInfoV1.defaultExpectation.params != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Expect")
	}

	if mmStockInfoV1.defaultExpectation.paramPtrs == nil {
		mmStockInfoV1.defaultExpectation.paramPtrs = &StockServiceV1ClientMockStockInfoV1ParamPtrs{}
	}
	mmStockInfoV1.defaultExpectation.paramPtrs.opts = &opts
	mmStockInfoV1.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmStockInfoV1
}

// Inspect accepts an inspector function that has same arguments as the StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Inspect(f func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption)) *mStockServiceV1ClientMockStockInfoV1 {
	if mmStockInfoV1.mock.inspectFuncStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("Inspect function is already set for StockServiceV1ClientMock.StockInfoV1")
	}

	mmStockInfoV1.mock.inspectFuncStockInfoV1 = f

	return mmStockInfoV1
}

// Return sets up results that will be returned by StockServiceV1Client.StockInfoV1
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Return(sp1 *mm_stocks.StockInfoResponse, err error) *StockServiceV1ClientMock {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	if mmStockInfoV1.defaultExpectation == nil {
		mmStockInfoV1.defaultExpectation = &StockServiceV1ClientMockStockInfoV1Expectation{mock: mmStockInfoV1.mock}
	}
	mmStockInfoV1.defaultExpectation.results = &StockServiceV1ClientMockStockInfoV1Results{sp1, err}
	mmStockInfoV1.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStockInfoV1.mock
}

// Set uses given function f to mock the StockServiceV1Client.StockInfoV1 method
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Set(f func(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error)) *StockServiceV1ClientMock {
	if mmStockInfoV1.defaultExpectation != nil {
		mmStockInfoV1.mock.t.Fatalf("Default expectation is already set for the StockServiceV1Client.StockInfoV1 method")
	}

	if len(mmStockInfoV1.expectations) > 0 {
		mmStockInfoV1.mock.t.Fatalf("Some expectations are already set for the StockServiceV1Client.StockInfoV1 method")
	}

	mmStockInfoV1.mock.funcStockInfoV1 = f
	mmStockInfoV1.mock.funcStockInfoV1Origin = minimock.CallerInfo(1)
	return mmStockInfoV1.mock
}

// When sets expectation for the StockServiceV1Client.StockInfoV1 which will trigger the result defined by the following
// Then helper
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) When(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) *StockServiceV1ClientMockStockInfoV1Expectation {
	if mmStockInfoV1.mock.funcStockInfoV1 != nil {
		mmStockInfoV1.mock.t.Fatalf("StockServiceV1ClientMock.StockInfoV1 mock is already set by Set")
	}

	expectation := &StockServiceV1ClientMockStockInfoV1Expectation{
		mock:               mmStockInfoV1.mock,
		params:             &StockServiceV1ClientMockStockInfoV1Params{ctx, in, opts},
		expectationOrigins: StockServiceV1ClientMockStockInfoV1ExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStockInfoV1.expectations = append(mmStockInfoV1.expectations, expectation)
	return expectation
}

// Then sets up StockServiceV1Client.StockInfoV1 return parameters for the expectation previously defined by the When method
func (e *StockServiceV1ClientMockStockInfoV1Expectation) Then(sp1 *mm_stocks.StockInfoResponse, err error) *StockServiceV1ClientMock {
	e.results = &StockServiceV1ClientMockStockInfoV1Results{sp1, err}
	return e.mock
}

// Times sets number of times StockServiceV1Client.StockInfoV1 should be invoked
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Times(n uint64) *mStockServiceV1ClientMockStockInfoV1 {
	if n == 0 {
		mmStockInfoV1.mock.t.Fatalf("Times of StockServiceV1ClientMock.StockInfoV1 mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStockInfoV1.expectedInvocations, n)
	mmStockInfoV1.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStockInfoV1
}

func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) invocationsDone() bool {
	if len(mmStockInfoV1.expectations) == 0 && mmStockInfoV1.defaultExpectation == nil && mmStockInfoV1.mock.funcStockInfoV1 == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStockInfoV1.mock.afterStockInfoV1Counter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStockInfoV1.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StockInfoV1 implements mm_stocks.StockServiceV1Client
func (mmStockInfoV1 *StockServiceV1ClientMock) StockInfoV1(ctx context.Context, in *mm_stocks.StockInfoRequest, opts ...grpc.CallOption) (sp1 *mm_stocks.StockInfoResponse, err error) {
	mm_atomic.AddUint64(&mmStockInfoV1.beforeStockInfoV1Counter, 1)
	defer mm_atomic.AddUint64(&mmStockInfoV1.afterStockInfoV1Counter, 1)

	mmStockInfoV1.t.Helper()

	if mmStockInfoV1.inspectFuncStockInfoV1 != nil {
		mmStockInfoV1.inspectFuncStockInfoV1(ctx, in, opts...)
	}

	mm_params := StockServiceV1ClientMockStockInfoV1Params{ctx, in, opts}

	// Record call args
	mmStockInfoV1.StockInfoV1Mock.mutex.Lock()
	mmStockInfoV1.StockInfoV1Mock.callArgs = append(mmStockInfoV1.StockInfoV1Mock.callArgs, &mm_params)
	mmStockInfoV1.StockInfoV1Mock.mutex.Unlock()

	for _, e := range mmStockInfoV1.StockInfoV1Mock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStockInfoV1.StockInfoV1Mock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStockInfoV1.StockInfoV1Mock.defaultExpectation.Counter, 1)
		mm_want := mmStockInfoV1.StockInfoV1Mock.defaultExpectation.params
		mm_want_ptrs := mmStockInfoV1.StockInfoV1Mock.defaultExpectation.paramPtrs

		mm_got := StockServiceV1ClientMockStockInfoV1Params{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStockInfoV1.t.Errorf("StockServiceV1ClientMock.StockInfoV1 got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfoV1.StockInfoV1Mock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmStockInfoV1.t.Errorf("StockServiceV1ClientMock.StockInfoV1 got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfoV1.StockInfoV1Mock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmStockInfoV1.t.Errorf("StockServiceV1ClientMock.StockInfoV1 got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStockInfoV1.StockInfoV1Mock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStockInfoV1.t.Errorf("StockServiceV1ClientMock.StockInfoV1 got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStockInfoV1.StockInfoV1Mock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStockInfoV1.StockInfoV1Mock.defaultExpectation.results
		if mm_results == nil {
			mmStockInfoV1.t.Fatal("No results are set for the StockServiceV1ClientMock.StockInfoV1")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStockInfoV1.funcStockInfoV1 != nil {
		return mmStockInfoV1.funcStockInfoV1(ctx, in, opts...)
	}
	mmStockInfoV1.t.Fatalf("Unexpected call to StockServiceV1ClientMock.StockInfoV1. %v %v %v", ctx, in, opts)
	return
}

// StockInfoV1AfterCounter returns a count of finished StockServiceV1ClientMock.StockInfoV1 invocations
func (mmStockInfoV1 *StockServiceV1ClientMock) StockInfoV1AfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfoV1.afterStockInfoV1Counter)
}

// StockInfoV1BeforeCounter returns a count of StockServiceV1ClientMock.StockInfoV1 invocations
func (mmStockInfoV1 *StockServiceV1ClientMock) StockInfoV1BeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfoV1.beforeStockInfoV1Counter)
}

// Calls returns a list of arguments used in each call to StockServiceV1ClientMock.StockInfoV1.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStockInfoV1 *mStockServiceV1ClientMockStockInfoV1) Calls() []*StockServiceV1ClientMockStockInfoV1Params {
	mmStockInfoV1.mutex.RLock()

	argCopy := make([]*StockServiceV1ClientMockStockInfoV1Params, len(mmStockInfoV1.callArgs))
	copy(argCopy, mmStockInfoV1.callArgs)

	mmStockInfoV1.mutex.RUnlock()

	return argCopy
}

// MinimockStockInfoV1Done returns true if the count of the StockInfoV1 invocations corresponds
// the number of defined expectations
func (m *StockServiceV1ClientMock) MinimockStockInfoV1Done() bool {
	if m.StockInfoV1Mock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StockInfoV1Mock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StockInfoV1Mock.invocationsDone()
}

// MinimockStockInfoV1Inspect logs each unmet expectation
func (m *StockServiceV1ClientMock) MinimockStockInfoV1Inspect() {
	for _, e := range m.StockInfoV1Mock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceV1ClientMock.StockInfoV1 at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStockInfoV1Counter := mm_atomic.LoadUint64(&m.afterStockInfoV1Counter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StockInfoV1Mock.defaultExpectation != nil && afterStockInfoV1Counter < 1 {
		if m.StockInfoV1Mock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockServiceV1ClientMock.StockInfoV1 at\n%s", m.StockInfoV1Mock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockServiceV1ClientMock.StockInfoV1 at\n%s with params: %#v", m.StockInfoV1Mock.defaultExpectation.expectationOrigins.origin, *m.StockInfoV1Mock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStockInfoV1 != nil && afterStockInfoV1Counter < 1 {
		m.t.Errorf("Expected call to StockServiceV1ClientMock.StockInfoV1 at\n%s", m.funcStockInfoV1Origin)
	}

	if !m.StockInfoV1Mock.invocationsDone() && afterStockInfoV1Counter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceV1ClientMock.StockInfoV1 at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StockInfoV1Mock.expectedInvocations), m.StockInfoV1Mock.expectedInvocationsOrigin, afterStockInfoV1Counter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockServiceV1ClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStockInfoV1Inspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockServiceV1ClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockServiceV1ClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStockInfoV1Done()
}
