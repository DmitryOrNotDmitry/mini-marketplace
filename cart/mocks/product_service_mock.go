// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/cart/internal/service.ProductService -o product_service_mock.go -n ProductServiceMock -p mocks

import (
	"context"
	"route256/cart/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductServiceMock implements mm_service.ProductService
type ProductServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProductBySku          func(ctx context.Context, sku int64) (pp1 *domain.Product, err error)
	funcGetProductBySkuOrigin    string
	inspectFuncGetProductBySku   func(ctx context.Context, sku int64)
	afterGetProductBySkuCounter  uint64
	beforeGetProductBySkuCounter uint64
	GetProductBySkuMock          mProductServiceMockGetProductBySku
}

// NewProductServiceMock returns a mock for mm_service.ProductService
func NewProductServiceMock(t minimock.Tester) *ProductServiceMock {
	m := &ProductServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductBySkuMock = mProductServiceMockGetProductBySku{mock: m}
	m.GetProductBySkuMock.callArgs = []*ProductServiceMockGetProductBySkuParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductServiceMockGetProductBySku struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetProductBySkuExpectation
	expectations       []*ProductServiceMockGetProductBySkuExpectation

	callArgs []*ProductServiceMockGetProductBySkuParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductServiceMockGetProductBySkuExpectation specifies expectation struct of the ProductService.GetProductBySku
type ProductServiceMockGetProductBySkuExpectation struct {
	mock               *ProductServiceMock
	params             *ProductServiceMockGetProductBySkuParams
	paramPtrs          *ProductServiceMockGetProductBySkuParamPtrs
	expectationOrigins ProductServiceMockGetProductBySkuExpectationOrigins
	results            *ProductServiceMockGetProductBySkuResults
	returnOrigin       string
	Counter            uint64
}

// ProductServiceMockGetProductBySkuParams contains parameters of the ProductService.GetProductBySku
type ProductServiceMockGetProductBySkuParams struct {
	ctx context.Context
	sku int64
}

// ProductServiceMockGetProductBySkuParamPtrs contains pointers to parameters of the ProductService.GetProductBySku
type ProductServiceMockGetProductBySkuParamPtrs struct {
	ctx *context.Context
	sku *int64
}

// ProductServiceMockGetProductBySkuResults contains results of the ProductService.GetProductBySku
type ProductServiceMockGetProductBySkuResults struct {
	pp1 *domain.Product
	err error
}

// ProductServiceMockGetProductBySkuOrigins contains origins of expectations of the ProductService.GetProductBySku
type ProductServiceMockGetProductBySkuExpectationOrigins struct {
	origin    string
	originCtx string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Optional() *mProductServiceMockGetProductBySku {
	mmGetProductBySku.optional = true
	return mmGetProductBySku
}

// Expect sets up expected params for ProductService.GetProductBySku
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Expect(ctx context.Context, sku int64) *mProductServiceMockGetProductBySku {
	if mmGetProductBySku.mock.funcGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Set")
	}

	if mmGetProductBySku.defaultExpectation == nil {
		mmGetProductBySku.defaultExpectation = &ProductServiceMockGetProductBySkuExpectation{}
	}

	if mmGetProductBySku.defaultExpectation.paramPtrs != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by ExpectParams functions")
	}

	mmGetProductBySku.defaultExpectation.params = &ProductServiceMockGetProductBySkuParams{ctx, sku}
	mmGetProductBySku.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProductBySku.expectations {
		if minimock.Equal(e.params, mmGetProductBySku.defaultExpectation.params) {
			mmGetProductBySku.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductBySku.defaultExpectation.params)
		}
	}

	return mmGetProductBySku
}

// ExpectCtxParam1 sets up expected param ctx for ProductService.GetProductBySku
func (mmGetProductBySku *mProductServiceMockGetProductBySku) ExpectCtxParam1(ctx context.Context) *mProductServiceMockGetProductBySku {
	if mmGetProductBySku.mock.funcGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Set")
	}

	if mmGetProductBySku.defaultExpectation == nil {
		mmGetProductBySku.defaultExpectation = &ProductServiceMockGetProductBySkuExpectation{}
	}

	if mmGetProductBySku.defaultExpectation.params != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Expect")
	}

	if mmGetProductBySku.defaultExpectation.paramPtrs == nil {
		mmGetProductBySku.defaultExpectation.paramPtrs = &ProductServiceMockGetProductBySkuParamPtrs{}
	}
	mmGetProductBySku.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetProductBySku.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetProductBySku
}

// ExpectSkuParam2 sets up expected param sku for ProductService.GetProductBySku
func (mmGetProductBySku *mProductServiceMockGetProductBySku) ExpectSkuParam2(sku int64) *mProductServiceMockGetProductBySku {
	if mmGetProductBySku.mock.funcGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Set")
	}

	if mmGetProductBySku.defaultExpectation == nil {
		mmGetProductBySku.defaultExpectation = &ProductServiceMockGetProductBySkuExpectation{}
	}

	if mmGetProductBySku.defaultExpectation.params != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Expect")
	}

	if mmGetProductBySku.defaultExpectation.paramPtrs == nil {
		mmGetProductBySku.defaultExpectation.paramPtrs = &ProductServiceMockGetProductBySkuParamPtrs{}
	}
	mmGetProductBySku.defaultExpectation.paramPtrs.sku = &sku
	mmGetProductBySku.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmGetProductBySku
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetProductBySku
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Inspect(f func(ctx context.Context, sku int64)) *mProductServiceMockGetProductBySku {
	if mmGetProductBySku.mock.inspectFuncGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetProductBySku")
	}

	mmGetProductBySku.mock.inspectFuncGetProductBySku = f

	return mmGetProductBySku
}

// Return sets up results that will be returned by ProductService.GetProductBySku
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Return(pp1 *domain.Product, err error) *ProductServiceMock {
	if mmGetProductBySku.mock.funcGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Set")
	}

	if mmGetProductBySku.defaultExpectation == nil {
		mmGetProductBySku.defaultExpectation = &ProductServiceMockGetProductBySkuExpectation{mock: mmGetProductBySku.mock}
	}
	mmGetProductBySku.defaultExpectation.results = &ProductServiceMockGetProductBySkuResults{pp1, err}
	mmGetProductBySku.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProductBySku.mock
}

// Set uses given function f to mock the ProductService.GetProductBySku method
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Set(f func(ctx context.Context, sku int64) (pp1 *domain.Product, err error)) *ProductServiceMock {
	if mmGetProductBySku.defaultExpectation != nil {
		mmGetProductBySku.mock.t.Fatalf("Default expectation is already set for the ProductService.GetProductBySku method")
	}

	if len(mmGetProductBySku.expectations) > 0 {
		mmGetProductBySku.mock.t.Fatalf("Some expectations are already set for the ProductService.GetProductBySku method")
	}

	mmGetProductBySku.mock.funcGetProductBySku = f
	mmGetProductBySku.mock.funcGetProductBySkuOrigin = minimock.CallerInfo(1)
	return mmGetProductBySku.mock
}

// When sets expectation for the ProductService.GetProductBySku which will trigger the result defined by the following
// Then helper
func (mmGetProductBySku *mProductServiceMockGetProductBySku) When(ctx context.Context, sku int64) *ProductServiceMockGetProductBySkuExpectation {
	if mmGetProductBySku.mock.funcGetProductBySku != nil {
		mmGetProductBySku.mock.t.Fatalf("ProductServiceMock.GetProductBySku mock is already set by Set")
	}

	expectation := &ProductServiceMockGetProductBySkuExpectation{
		mock:               mmGetProductBySku.mock,
		params:             &ProductServiceMockGetProductBySkuParams{ctx, sku},
		expectationOrigins: ProductServiceMockGetProductBySkuExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProductBySku.expectations = append(mmGetProductBySku.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetProductBySku return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetProductBySkuExpectation) Then(pp1 *domain.Product, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetProductBySkuResults{pp1, err}
	return e.mock
}

// Times sets number of times ProductService.GetProductBySku should be invoked
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Times(n uint64) *mProductServiceMockGetProductBySku {
	if n == 0 {
		mmGetProductBySku.mock.t.Fatalf("Times of ProductServiceMock.GetProductBySku mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProductBySku.expectedInvocations, n)
	mmGetProductBySku.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProductBySku
}

func (mmGetProductBySku *mProductServiceMockGetProductBySku) invocationsDone() bool {
	if len(mmGetProductBySku.expectations) == 0 && mmGetProductBySku.defaultExpectation == nil && mmGetProductBySku.mock.funcGetProductBySku == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProductBySku.mock.afterGetProductBySkuCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProductBySku.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProductBySku implements mm_service.ProductService
func (mmGetProductBySku *ProductServiceMock) GetProductBySku(ctx context.Context, sku int64) (pp1 *domain.Product, err error) {
	mm_atomic.AddUint64(&mmGetProductBySku.beforeGetProductBySkuCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductBySku.afterGetProductBySkuCounter, 1)

	mmGetProductBySku.t.Helper()

	if mmGetProductBySku.inspectFuncGetProductBySku != nil {
		mmGetProductBySku.inspectFuncGetProductBySku(ctx, sku)
	}

	mm_params := ProductServiceMockGetProductBySkuParams{ctx, sku}

	// Record call args
	mmGetProductBySku.GetProductBySkuMock.mutex.Lock()
	mmGetProductBySku.GetProductBySkuMock.callArgs = append(mmGetProductBySku.GetProductBySkuMock.callArgs, &mm_params)
	mmGetProductBySku.GetProductBySkuMock.mutex.Unlock()

	for _, e := range mmGetProductBySku.GetProductBySkuMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProductBySku.GetProductBySkuMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductBySku.GetProductBySkuMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductBySku.GetProductBySkuMock.defaultExpectation.params
		mm_want_ptrs := mmGetProductBySku.GetProductBySkuMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetProductBySkuParams{ctx, sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProductBySku.t.Errorf("ProductServiceMock.GetProductBySku got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductBySku.GetProductBySkuMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetProductBySku.t.Errorf("ProductServiceMock.GetProductBySku got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductBySku.GetProductBySkuMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductBySku.t.Errorf("ProductServiceMock.GetProductBySku got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProductBySku.GetProductBySkuMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductBySku.GetProductBySkuMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductBySku.t.Fatal("No results are set for the ProductServiceMock.GetProductBySku")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProductBySku.funcGetProductBySku != nil {
		return mmGetProductBySku.funcGetProductBySku(ctx, sku)
	}
	mmGetProductBySku.t.Fatalf("Unexpected call to ProductServiceMock.GetProductBySku. %v %v", ctx, sku)
	return
}

// GetProductBySkuAfterCounter returns a count of finished ProductServiceMock.GetProductBySku invocations
func (mmGetProductBySku *ProductServiceMock) GetProductBySkuAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductBySku.afterGetProductBySkuCounter)
}

// GetProductBySkuBeforeCounter returns a count of ProductServiceMock.GetProductBySku invocations
func (mmGetProductBySku *ProductServiceMock) GetProductBySkuBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductBySku.beforeGetProductBySkuCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetProductBySku.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductBySku *mProductServiceMockGetProductBySku) Calls() []*ProductServiceMockGetProductBySkuParams {
	mmGetProductBySku.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetProductBySkuParams, len(mmGetProductBySku.callArgs))
	copy(argCopy, mmGetProductBySku.callArgs)

	mmGetProductBySku.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductBySkuDone returns true if the count of the GetProductBySku invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetProductBySkuDone() bool {
	if m.GetProductBySkuMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductBySkuMock.invocationsDone()
}

// MinimockGetProductBySkuInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetProductBySkuInspect() {
	for _, e := range m.GetProductBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetProductBySku at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductBySkuCounter := mm_atomic.LoadUint64(&m.afterGetProductBySkuCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductBySkuMock.defaultExpectation != nil && afterGetProductBySkuCounter < 1 {
		if m.GetProductBySkuMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductServiceMock.GetProductBySku at\n%s", m.GetProductBySkuMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetProductBySku at\n%s with params: %#v", m.GetProductBySkuMock.defaultExpectation.expectationOrigins.origin, *m.GetProductBySkuMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductBySku != nil && afterGetProductBySkuCounter < 1 {
		m.t.Errorf("Expected call to ProductServiceMock.GetProductBySku at\n%s", m.funcGetProductBySkuOrigin)
	}

	if !m.GetProductBySkuMock.invocationsDone() && afterGetProductBySkuCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetProductBySku at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductBySkuMock.expectedInvocations), m.GetProductBySkuMock.expectedInvocationsOrigin, afterGetProductBySkuCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductBySkuInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductBySkuDone()
}
