// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/pkg/api/orders/v1.OrderServiceClient -o order_service_client_mock.go -n OrderServiceClientMock -p mocks

import (
	context "context"
	mm_orders "route256/loms/pkg/api/orders/v1"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	grpc "google.golang.org/grpc"
)

// OrderServiceClientMock implements mm_orders.OrderServiceClient
type OrderServiceClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderCancel          func(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCancelResponse, err error)
	funcOrderCancelOrigin    string
	inspectFuncOrderCancel   func(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption)
	afterOrderCancelCounter  uint64
	beforeOrderCancelCounter uint64
	OrderCancelMock          mOrderServiceClientMockOrderCancel

	funcOrderCreate          func(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCreateResponse, err error)
	funcOrderCreateOrigin    string
	inspectFuncOrderCreate   func(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption)
	afterOrderCreateCounter  uint64
	beforeOrderCreateCounter uint64
	OrderCreateMock          mOrderServiceClientMockOrderCreate

	funcOrderInfo          func(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderInfoResponse, err error)
	funcOrderInfoOrigin    string
	inspectFuncOrderInfo   func(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption)
	afterOrderInfoCounter  uint64
	beforeOrderInfoCounter uint64
	OrderInfoMock          mOrderServiceClientMockOrderInfo

	funcOrderPay          func(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderPayResponse, err error)
	funcOrderPayOrigin    string
	inspectFuncOrderPay   func(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption)
	afterOrderPayCounter  uint64
	beforeOrderPayCounter uint64
	OrderPayMock          mOrderServiceClientMockOrderPay
}

// NewOrderServiceClientMock returns a mock for mm_orders.OrderServiceClient
func NewOrderServiceClientMock(t minimock.Tester) *OrderServiceClientMock {
	m := &OrderServiceClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderCancelMock = mOrderServiceClientMockOrderCancel{mock: m}
	m.OrderCancelMock.callArgs = []*OrderServiceClientMockOrderCancelParams{}

	m.OrderCreateMock = mOrderServiceClientMockOrderCreate{mock: m}
	m.OrderCreateMock.callArgs = []*OrderServiceClientMockOrderCreateParams{}

	m.OrderInfoMock = mOrderServiceClientMockOrderInfo{mock: m}
	m.OrderInfoMock.callArgs = []*OrderServiceClientMockOrderInfoParams{}

	m.OrderPayMock = mOrderServiceClientMockOrderPay{mock: m}
	m.OrderPayMock.callArgs = []*OrderServiceClientMockOrderPayParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderServiceClientMockOrderCancel struct {
	optional           bool
	mock               *OrderServiceClientMock
	defaultExpectation *OrderServiceClientMockOrderCancelExpectation
	expectations       []*OrderServiceClientMockOrderCancelExpectation

	callArgs []*OrderServiceClientMockOrderCancelParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderServiceClientMockOrderCancelExpectation specifies expectation struct of the OrderServiceClient.OrderCancel
type OrderServiceClientMockOrderCancelExpectation struct {
	mock               *OrderServiceClientMock
	params             *OrderServiceClientMockOrderCancelParams
	paramPtrs          *OrderServiceClientMockOrderCancelParamPtrs
	expectationOrigins OrderServiceClientMockOrderCancelExpectationOrigins
	results            *OrderServiceClientMockOrderCancelResults
	returnOrigin       string
	Counter            uint64
}

// OrderServiceClientMockOrderCancelParams contains parameters of the OrderServiceClient.OrderCancel
type OrderServiceClientMockOrderCancelParams struct {
	ctx  context.Context
	in   *mm_orders.OrderCancelRequest
	opts []grpc.CallOption
}

// OrderServiceClientMockOrderCancelParamPtrs contains pointers to parameters of the OrderServiceClient.OrderCancel
type OrderServiceClientMockOrderCancelParamPtrs struct {
	ctx  *context.Context
	in   **mm_orders.OrderCancelRequest
	opts *[]grpc.CallOption
}

// OrderServiceClientMockOrderCancelResults contains results of the OrderServiceClient.OrderCancel
type OrderServiceClientMockOrderCancelResults struct {
	op1 *mm_orders.OrderCancelResponse
	err error
}

// OrderServiceClientMockOrderCancelOrigins contains origins of expectations of the OrderServiceClient.OrderCancel
type OrderServiceClientMockOrderCancelExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Optional() *mOrderServiceClientMockOrderCancel {
	mmOrderCancel.optional = true
	return mmOrderCancel
}

// Expect sets up expected params for OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Expect(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption) *mOrderServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.paramPtrs != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by ExpectParams functions")
	}

	mmOrderCancel.defaultExpectation.params = &OrderServiceClientMockOrderCancelParams{ctx, in, opts}
	mmOrderCancel.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderCancel.expectations {
		if minimock.Equal(e.params, mmOrderCancel.defaultExpectation.params) {
			mmOrderCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCancel.defaultExpectation.params)
		}
	}

	return mmOrderCancel
}

// ExpectCtxParam1 sets up expected param ctx for OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) ExpectCtxParam1(ctx context.Context) *mOrderServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderCancel.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderCancel
}

// ExpectInParam2 sets up expected param in for OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) ExpectInParam2(in *mm_orders.OrderCancelRequest) *mOrderServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.in = &in
	mmOrderCancel.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderCancel
}

// ExpectOptsParam3 sets up expected param opts for OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) ExpectOptsParam3(opts ...grpc.CallOption) *mOrderServiceClientMockOrderCancel {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceClientMockOrderCancelExpectation{}
	}

	if mmOrderCancel.defaultExpectation.params != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Expect")
	}

	if mmOrderCancel.defaultExpectation.paramPtrs == nil {
		mmOrderCancel.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCancelParamPtrs{}
	}
	mmOrderCancel.defaultExpectation.paramPtrs.opts = &opts
	mmOrderCancel.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderCancel
}

// Inspect accepts an inspector function that has same arguments as the OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Inspect(f func(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption)) *mOrderServiceClientMockOrderCancel {
	if mmOrderCancel.mock.inspectFuncOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("Inspect function is already set for OrderServiceClientMock.OrderCancel")
	}

	mmOrderCancel.mock.inspectFuncOrderCancel = f

	return mmOrderCancel
}

// Return sets up results that will be returned by OrderServiceClient.OrderCancel
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Return(op1 *mm_orders.OrderCancelResponse, err error) *OrderServiceClientMock {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	if mmOrderCancel.defaultExpectation == nil {
		mmOrderCancel.defaultExpectation = &OrderServiceClientMockOrderCancelExpectation{mock: mmOrderCancel.mock}
	}
	mmOrderCancel.defaultExpectation.results = &OrderServiceClientMockOrderCancelResults{op1, err}
	mmOrderCancel.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderCancel.mock
}

// Set uses given function f to mock the OrderServiceClient.OrderCancel method
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Set(f func(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCancelResponse, err error)) *OrderServiceClientMock {
	if mmOrderCancel.defaultExpectation != nil {
		mmOrderCancel.mock.t.Fatalf("Default expectation is already set for the OrderServiceClient.OrderCancel method")
	}

	if len(mmOrderCancel.expectations) > 0 {
		mmOrderCancel.mock.t.Fatalf("Some expectations are already set for the OrderServiceClient.OrderCancel method")
	}

	mmOrderCancel.mock.funcOrderCancel = f
	mmOrderCancel.mock.funcOrderCancelOrigin = minimock.CallerInfo(1)
	return mmOrderCancel.mock
}

// When sets expectation for the OrderServiceClient.OrderCancel which will trigger the result defined by the following
// Then helper
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) When(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption) *OrderServiceClientMockOrderCancelExpectation {
	if mmOrderCancel.mock.funcOrderCancel != nil {
		mmOrderCancel.mock.t.Fatalf("OrderServiceClientMock.OrderCancel mock is already set by Set")
	}

	expectation := &OrderServiceClientMockOrderCancelExpectation{
		mock:               mmOrderCancel.mock,
		params:             &OrderServiceClientMockOrderCancelParams{ctx, in, opts},
		expectationOrigins: OrderServiceClientMockOrderCancelExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderCancel.expectations = append(mmOrderCancel.expectations, expectation)
	return expectation
}

// Then sets up OrderServiceClient.OrderCancel return parameters for the expectation previously defined by the When method
func (e *OrderServiceClientMockOrderCancelExpectation) Then(op1 *mm_orders.OrderCancelResponse, err error) *OrderServiceClientMock {
	e.results = &OrderServiceClientMockOrderCancelResults{op1, err}
	return e.mock
}

// Times sets number of times OrderServiceClient.OrderCancel should be invoked
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Times(n uint64) *mOrderServiceClientMockOrderCancel {
	if n == 0 {
		mmOrderCancel.mock.t.Fatalf("Times of OrderServiceClientMock.OrderCancel mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCancel.expectedInvocations, n)
	mmOrderCancel.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderCancel
}

func (mmOrderCancel *mOrderServiceClientMockOrderCancel) invocationsDone() bool {
	if len(mmOrderCancel.expectations) == 0 && mmOrderCancel.defaultExpectation == nil && mmOrderCancel.mock.funcOrderCancel == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCancel.mock.afterOrderCancelCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCancel.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCancel implements mm_orders.OrderServiceClient
func (mmOrderCancel *OrderServiceClientMock) OrderCancel(ctx context.Context, in *mm_orders.OrderCancelRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCancelResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCancel.beforeOrderCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCancel.afterOrderCancelCounter, 1)

	mmOrderCancel.t.Helper()

	if mmOrderCancel.inspectFuncOrderCancel != nil {
		mmOrderCancel.inspectFuncOrderCancel(ctx, in, opts...)
	}

	mm_params := OrderServiceClientMockOrderCancelParams{ctx, in, opts}

	// Record call args
	mmOrderCancel.OrderCancelMock.mutex.Lock()
	mmOrderCancel.OrderCancelMock.callArgs = append(mmOrderCancel.OrderCancelMock.callArgs, &mm_params)
	mmOrderCancel.OrderCancelMock.mutex.Unlock()

	for _, e := range mmOrderCancel.OrderCancelMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCancel.OrderCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCancel.OrderCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCancel.OrderCancelMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCancel.OrderCancelMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceClientMockOrderCancelParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCancel.t.Errorf("OrderServiceClientMock.OrderCancel got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderCancel.t.Errorf("OrderServiceClientMock.OrderCancel got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderCancel.t.Errorf("OrderServiceClientMock.OrderCancel got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCancel.t.Errorf("OrderServiceClientMock.OrderCancel got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderCancel.OrderCancelMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCancel.OrderCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCancel.t.Fatal("No results are set for the OrderServiceClientMock.OrderCancel")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCancel.funcOrderCancel != nil {
		return mmOrderCancel.funcOrderCancel(ctx, in, opts...)
	}
	mmOrderCancel.t.Fatalf("Unexpected call to OrderServiceClientMock.OrderCancel. %v %v %v", ctx, in, opts)
	return
}

// OrderCancelAfterCounter returns a count of finished OrderServiceClientMock.OrderCancel invocations
func (mmOrderCancel *OrderServiceClientMock) OrderCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.afterOrderCancelCounter)
}

// OrderCancelBeforeCounter returns a count of OrderServiceClientMock.OrderCancel invocations
func (mmOrderCancel *OrderServiceClientMock) OrderCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCancel.beforeOrderCancelCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceClientMock.OrderCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCancel *mOrderServiceClientMockOrderCancel) Calls() []*OrderServiceClientMockOrderCancelParams {
	mmOrderCancel.mutex.RLock()

	argCopy := make([]*OrderServiceClientMockOrderCancelParams, len(mmOrderCancel.callArgs))
	copy(argCopy, mmOrderCancel.callArgs)

	mmOrderCancel.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCancelDone returns true if the count of the OrderCancel invocations corresponds
// the number of defined expectations
func (m *OrderServiceClientMock) MinimockOrderCancelDone() bool {
	if m.OrderCancelMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCancelMock.invocationsDone()
}

// MinimockOrderCancelInspect logs each unmet expectation
func (m *OrderServiceClientMock) MinimockOrderCancelInspect() {
	for _, e := range m.OrderCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCancel at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderCancelCounter := mm_atomic.LoadUint64(&m.afterOrderCancelCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCancelMock.defaultExpectation != nil && afterOrderCancelCounter < 1 {
		if m.OrderCancelMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCancel at\n%s", m.OrderCancelMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCancel at\n%s with params: %#v", m.OrderCancelMock.defaultExpectation.expectationOrigins.origin, *m.OrderCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCancel != nil && afterOrderCancelCounter < 1 {
		m.t.Errorf("Expected call to OrderServiceClientMock.OrderCancel at\n%s", m.funcOrderCancelOrigin)
	}

	if !m.OrderCancelMock.invocationsDone() && afterOrderCancelCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceClientMock.OrderCancel at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCancelMock.expectedInvocations), m.OrderCancelMock.expectedInvocationsOrigin, afterOrderCancelCounter)
	}
}

type mOrderServiceClientMockOrderCreate struct {
	optional           bool
	mock               *OrderServiceClientMock
	defaultExpectation *OrderServiceClientMockOrderCreateExpectation
	expectations       []*OrderServiceClientMockOrderCreateExpectation

	callArgs []*OrderServiceClientMockOrderCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderServiceClientMockOrderCreateExpectation specifies expectation struct of the OrderServiceClient.OrderCreate
type OrderServiceClientMockOrderCreateExpectation struct {
	mock               *OrderServiceClientMock
	params             *OrderServiceClientMockOrderCreateParams
	paramPtrs          *OrderServiceClientMockOrderCreateParamPtrs
	expectationOrigins OrderServiceClientMockOrderCreateExpectationOrigins
	results            *OrderServiceClientMockOrderCreateResults
	returnOrigin       string
	Counter            uint64
}

// OrderServiceClientMockOrderCreateParams contains parameters of the OrderServiceClient.OrderCreate
type OrderServiceClientMockOrderCreateParams struct {
	ctx  context.Context
	in   *mm_orders.OrderCreateRequest
	opts []grpc.CallOption
}

// OrderServiceClientMockOrderCreateParamPtrs contains pointers to parameters of the OrderServiceClient.OrderCreate
type OrderServiceClientMockOrderCreateParamPtrs struct {
	ctx  *context.Context
	in   **mm_orders.OrderCreateRequest
	opts *[]grpc.CallOption
}

// OrderServiceClientMockOrderCreateResults contains results of the OrderServiceClient.OrderCreate
type OrderServiceClientMockOrderCreateResults struct {
	op1 *mm_orders.OrderCreateResponse
	err error
}

// OrderServiceClientMockOrderCreateOrigins contains origins of expectations of the OrderServiceClient.OrderCreate
type OrderServiceClientMockOrderCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Optional() *mOrderServiceClientMockOrderCreate {
	mmOrderCreate.optional = true
	return mmOrderCreate
}

// Expect sets up expected params for OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Expect(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption) *mOrderServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.paramPtrs != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by ExpectParams functions")
	}

	mmOrderCreate.defaultExpectation.params = &OrderServiceClientMockOrderCreateParams{ctx, in, opts}
	mmOrderCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderCreate.expectations {
		if minimock.Equal(e.params, mmOrderCreate.defaultExpectation.params) {
			mmOrderCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCreate.defaultExpectation.params)
		}
	}

	return mmOrderCreate
}

// ExpectCtxParam1 sets up expected param ctx for OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) ExpectCtxParam1(ctx context.Context) *mOrderServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectInParam2 sets up expected param in for OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) ExpectInParam2(in *mm_orders.OrderCreateRequest) *mOrderServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.in = &in
	mmOrderCreate.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectOptsParam3 sets up expected param opts for OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) ExpectOptsParam3(opts ...grpc.CallOption) *mOrderServiceClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceClientMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.opts = &opts
	mmOrderCreate.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderCreate
}

// Inspect accepts an inspector function that has same arguments as the OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Inspect(f func(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption)) *mOrderServiceClientMockOrderCreate {
	if mmOrderCreate.mock.inspectFuncOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("Inspect function is already set for OrderServiceClientMock.OrderCreate")
	}

	mmOrderCreate.mock.inspectFuncOrderCreate = f

	return mmOrderCreate
}

// Return sets up results that will be returned by OrderServiceClient.OrderCreate
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Return(op1 *mm_orders.OrderCreateResponse, err error) *OrderServiceClientMock {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &OrderServiceClientMockOrderCreateExpectation{mock: mmOrderCreate.mock}
	}
	mmOrderCreate.defaultExpectation.results = &OrderServiceClientMockOrderCreateResults{op1, err}
	mmOrderCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// Set uses given function f to mock the OrderServiceClient.OrderCreate method
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Set(f func(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCreateResponse, err error)) *OrderServiceClientMock {
	if mmOrderCreate.defaultExpectation != nil {
		mmOrderCreate.mock.t.Fatalf("Default expectation is already set for the OrderServiceClient.OrderCreate method")
	}

	if len(mmOrderCreate.expectations) > 0 {
		mmOrderCreate.mock.t.Fatalf("Some expectations are already set for the OrderServiceClient.OrderCreate method")
	}

	mmOrderCreate.mock.funcOrderCreate = f
	mmOrderCreate.mock.funcOrderCreateOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// When sets expectation for the OrderServiceClient.OrderCreate which will trigger the result defined by the following
// Then helper
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) When(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption) *OrderServiceClientMockOrderCreateExpectation {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("OrderServiceClientMock.OrderCreate mock is already set by Set")
	}

	expectation := &OrderServiceClientMockOrderCreateExpectation{
		mock:               mmOrderCreate.mock,
		params:             &OrderServiceClientMockOrderCreateParams{ctx, in, opts},
		expectationOrigins: OrderServiceClientMockOrderCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderCreate.expectations = append(mmOrderCreate.expectations, expectation)
	return expectation
}

// Then sets up OrderServiceClient.OrderCreate return parameters for the expectation previously defined by the When method
func (e *OrderServiceClientMockOrderCreateExpectation) Then(op1 *mm_orders.OrderCreateResponse, err error) *OrderServiceClientMock {
	e.results = &OrderServiceClientMockOrderCreateResults{op1, err}
	return e.mock
}

// Times sets number of times OrderServiceClient.OrderCreate should be invoked
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Times(n uint64) *mOrderServiceClientMockOrderCreate {
	if n == 0 {
		mmOrderCreate.mock.t.Fatalf("Times of OrderServiceClientMock.OrderCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCreate.expectedInvocations, n)
	mmOrderCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderCreate
}

func (mmOrderCreate *mOrderServiceClientMockOrderCreate) invocationsDone() bool {
	if len(mmOrderCreate.expectations) == 0 && mmOrderCreate.defaultExpectation == nil && mmOrderCreate.mock.funcOrderCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCreate.mock.afterOrderCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCreate implements mm_orders.OrderServiceClient
func (mmOrderCreate *OrderServiceClientMock) OrderCreate(ctx context.Context, in *mm_orders.OrderCreateRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderCreateResponse, err error) {
	mm_atomic.AddUint64(&mmOrderCreate.beforeOrderCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCreate.afterOrderCreateCounter, 1)

	mmOrderCreate.t.Helper()

	if mmOrderCreate.inspectFuncOrderCreate != nil {
		mmOrderCreate.inspectFuncOrderCreate(ctx, in, opts...)
	}

	mm_params := OrderServiceClientMockOrderCreateParams{ctx, in, opts}

	// Record call args
	mmOrderCreate.OrderCreateMock.mutex.Lock()
	mmOrderCreate.OrderCreateMock.callArgs = append(mmOrderCreate.OrderCreateMock.callArgs, &mm_params)
	mmOrderCreate.OrderCreateMock.mutex.Unlock()

	for _, e := range mmOrderCreate.OrderCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderCreate.OrderCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCreate.OrderCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCreate.OrderCreateMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCreate.OrderCreateMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceClientMockOrderCreateParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCreate.t.Errorf("OrderServiceClientMock.OrderCreate got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderCreate.t.Errorf("OrderServiceClientMock.OrderCreate got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderCreate.t.Errorf("OrderServiceClientMock.OrderCreate got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCreate.t.Errorf("OrderServiceClientMock.OrderCreate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCreate.OrderCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCreate.t.Fatal("No results are set for the OrderServiceClientMock.OrderCreate")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderCreate.funcOrderCreate != nil {
		return mmOrderCreate.funcOrderCreate(ctx, in, opts...)
	}
	mmOrderCreate.t.Fatalf("Unexpected call to OrderServiceClientMock.OrderCreate. %v %v %v", ctx, in, opts)
	return
}

// OrderCreateAfterCounter returns a count of finished OrderServiceClientMock.OrderCreate invocations
func (mmOrderCreate *OrderServiceClientMock) OrderCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.afterOrderCreateCounter)
}

// OrderCreateBeforeCounter returns a count of OrderServiceClientMock.OrderCreate invocations
func (mmOrderCreate *OrderServiceClientMock) OrderCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.beforeOrderCreateCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceClientMock.OrderCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCreate *mOrderServiceClientMockOrderCreate) Calls() []*OrderServiceClientMockOrderCreateParams {
	mmOrderCreate.mutex.RLock()

	argCopy := make([]*OrderServiceClientMockOrderCreateParams, len(mmOrderCreate.callArgs))
	copy(argCopy, mmOrderCreate.callArgs)

	mmOrderCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCreateDone returns true if the count of the OrderCreate invocations corresponds
// the number of defined expectations
func (m *OrderServiceClientMock) MinimockOrderCreateDone() bool {
	if m.OrderCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCreateMock.invocationsDone()
}

// MinimockOrderCreateInspect logs each unmet expectation
func (m *OrderServiceClientMock) MinimockOrderCreateInspect() {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCreate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderCreateCounter := mm_atomic.LoadUint64(&m.afterOrderCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && afterOrderCreateCounter < 1 {
		if m.OrderCreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCreate at\n%s", m.OrderCreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderCreate at\n%s with params: %#v", m.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *m.OrderCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && afterOrderCreateCounter < 1 {
		m.t.Errorf("Expected call to OrderServiceClientMock.OrderCreate at\n%s", m.funcOrderCreateOrigin)
	}

	if !m.OrderCreateMock.invocationsDone() && afterOrderCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceClientMock.OrderCreate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCreateMock.expectedInvocations), m.OrderCreateMock.expectedInvocationsOrigin, afterOrderCreateCounter)
	}
}

type mOrderServiceClientMockOrderInfo struct {
	optional           bool
	mock               *OrderServiceClientMock
	defaultExpectation *OrderServiceClientMockOrderInfoExpectation
	expectations       []*OrderServiceClientMockOrderInfoExpectation

	callArgs []*OrderServiceClientMockOrderInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderServiceClientMockOrderInfoExpectation specifies expectation struct of the OrderServiceClient.OrderInfo
type OrderServiceClientMockOrderInfoExpectation struct {
	mock               *OrderServiceClientMock
	params             *OrderServiceClientMockOrderInfoParams
	paramPtrs          *OrderServiceClientMockOrderInfoParamPtrs
	expectationOrigins OrderServiceClientMockOrderInfoExpectationOrigins
	results            *OrderServiceClientMockOrderInfoResults
	returnOrigin       string
	Counter            uint64
}

// OrderServiceClientMockOrderInfoParams contains parameters of the OrderServiceClient.OrderInfo
type OrderServiceClientMockOrderInfoParams struct {
	ctx  context.Context
	in   *mm_orders.OrderInfoRequest
	opts []grpc.CallOption
}

// OrderServiceClientMockOrderInfoParamPtrs contains pointers to parameters of the OrderServiceClient.OrderInfo
type OrderServiceClientMockOrderInfoParamPtrs struct {
	ctx  *context.Context
	in   **mm_orders.OrderInfoRequest
	opts *[]grpc.CallOption
}

// OrderServiceClientMockOrderInfoResults contains results of the OrderServiceClient.OrderInfo
type OrderServiceClientMockOrderInfoResults struct {
	op1 *mm_orders.OrderInfoResponse
	err error
}

// OrderServiceClientMockOrderInfoOrigins contains origins of expectations of the OrderServiceClient.OrderInfo
type OrderServiceClientMockOrderInfoExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Optional() *mOrderServiceClientMockOrderInfo {
	mmOrderInfo.optional = true
	return mmOrderInfo
}

// Expect sets up expected params for OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Expect(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption) *mOrderServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.paramPtrs != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by ExpectParams functions")
	}

	mmOrderInfo.defaultExpectation.params = &OrderServiceClientMockOrderInfoParams{ctx, in, opts}
	mmOrderInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderInfo.expectations {
		if minimock.Equal(e.params, mmOrderInfo.defaultExpectation.params) {
			mmOrderInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderInfo.defaultExpectation.params)
		}
	}

	return mmOrderInfo
}

// ExpectCtxParam1 sets up expected param ctx for OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) ExpectCtxParam1(ctx context.Context) *mOrderServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderInfo
}

// ExpectInParam2 sets up expected param in for OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) ExpectInParam2(in *mm_orders.OrderInfoRequest) *mOrderServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.in = &in
	mmOrderInfo.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderInfo
}

// ExpectOptsParam3 sets up expected param opts for OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) ExpectOptsParam3(opts ...grpc.CallOption) *mOrderServiceClientMockOrderInfo {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceClientMockOrderInfoExpectation{}
	}

	if mmOrderInfo.defaultExpectation.params != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Expect")
	}

	if mmOrderInfo.defaultExpectation.paramPtrs == nil {
		mmOrderInfo.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderInfoParamPtrs{}
	}
	mmOrderInfo.defaultExpectation.paramPtrs.opts = &opts
	mmOrderInfo.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderInfo
}

// Inspect accepts an inspector function that has same arguments as the OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Inspect(f func(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption)) *mOrderServiceClientMockOrderInfo {
	if mmOrderInfo.mock.inspectFuncOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("Inspect function is already set for OrderServiceClientMock.OrderInfo")
	}

	mmOrderInfo.mock.inspectFuncOrderInfo = f

	return mmOrderInfo
}

// Return sets up results that will be returned by OrderServiceClient.OrderInfo
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Return(op1 *mm_orders.OrderInfoResponse, err error) *OrderServiceClientMock {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	if mmOrderInfo.defaultExpectation == nil {
		mmOrderInfo.defaultExpectation = &OrderServiceClientMockOrderInfoExpectation{mock: mmOrderInfo.mock}
	}
	mmOrderInfo.defaultExpectation.results = &OrderServiceClientMockOrderInfoResults{op1, err}
	mmOrderInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderInfo.mock
}

// Set uses given function f to mock the OrderServiceClient.OrderInfo method
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Set(f func(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderInfoResponse, err error)) *OrderServiceClientMock {
	if mmOrderInfo.defaultExpectation != nil {
		mmOrderInfo.mock.t.Fatalf("Default expectation is already set for the OrderServiceClient.OrderInfo method")
	}

	if len(mmOrderInfo.expectations) > 0 {
		mmOrderInfo.mock.t.Fatalf("Some expectations are already set for the OrderServiceClient.OrderInfo method")
	}

	mmOrderInfo.mock.funcOrderInfo = f
	mmOrderInfo.mock.funcOrderInfoOrigin = minimock.CallerInfo(1)
	return mmOrderInfo.mock
}

// When sets expectation for the OrderServiceClient.OrderInfo which will trigger the result defined by the following
// Then helper
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) When(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption) *OrderServiceClientMockOrderInfoExpectation {
	if mmOrderInfo.mock.funcOrderInfo != nil {
		mmOrderInfo.mock.t.Fatalf("OrderServiceClientMock.OrderInfo mock is already set by Set")
	}

	expectation := &OrderServiceClientMockOrderInfoExpectation{
		mock:               mmOrderInfo.mock,
		params:             &OrderServiceClientMockOrderInfoParams{ctx, in, opts},
		expectationOrigins: OrderServiceClientMockOrderInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderInfo.expectations = append(mmOrderInfo.expectations, expectation)
	return expectation
}

// Then sets up OrderServiceClient.OrderInfo return parameters for the expectation previously defined by the When method
func (e *OrderServiceClientMockOrderInfoExpectation) Then(op1 *mm_orders.OrderInfoResponse, err error) *OrderServiceClientMock {
	e.results = &OrderServiceClientMockOrderInfoResults{op1, err}
	return e.mock
}

// Times sets number of times OrderServiceClient.OrderInfo should be invoked
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Times(n uint64) *mOrderServiceClientMockOrderInfo {
	if n == 0 {
		mmOrderInfo.mock.t.Fatalf("Times of OrderServiceClientMock.OrderInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderInfo.expectedInvocations, n)
	mmOrderInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderInfo
}

func (mmOrderInfo *mOrderServiceClientMockOrderInfo) invocationsDone() bool {
	if len(mmOrderInfo.expectations) == 0 && mmOrderInfo.defaultExpectation == nil && mmOrderInfo.mock.funcOrderInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderInfo.mock.afterOrderInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderInfo implements mm_orders.OrderServiceClient
func (mmOrderInfo *OrderServiceClientMock) OrderInfo(ctx context.Context, in *mm_orders.OrderInfoRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderInfoResponse, err error) {
	mm_atomic.AddUint64(&mmOrderInfo.beforeOrderInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderInfo.afterOrderInfoCounter, 1)

	mmOrderInfo.t.Helper()

	if mmOrderInfo.inspectFuncOrderInfo != nil {
		mmOrderInfo.inspectFuncOrderInfo(ctx, in, opts...)
	}

	mm_params := OrderServiceClientMockOrderInfoParams{ctx, in, opts}

	// Record call args
	mmOrderInfo.OrderInfoMock.mutex.Lock()
	mmOrderInfo.OrderInfoMock.callArgs = append(mmOrderInfo.OrderInfoMock.callArgs, &mm_params)
	mmOrderInfo.OrderInfoMock.mutex.Unlock()

	for _, e := range mmOrderInfo.OrderInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderInfo.OrderInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderInfo.OrderInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderInfo.OrderInfoMock.defaultExpectation.params
		mm_want_ptrs := mmOrderInfo.OrderInfoMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceClientMockOrderInfoParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderInfo.t.Errorf("OrderServiceClientMock.OrderInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderInfo.t.Errorf("OrderServiceClientMock.OrderInfo got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderInfo.t.Errorf("OrderServiceClientMock.OrderInfo got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderInfo.t.Errorf("OrderServiceClientMock.OrderInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderInfo.OrderInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderInfo.OrderInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderInfo.t.Fatal("No results are set for the OrderServiceClientMock.OrderInfo")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderInfo.funcOrderInfo != nil {
		return mmOrderInfo.funcOrderInfo(ctx, in, opts...)
	}
	mmOrderInfo.t.Fatalf("Unexpected call to OrderServiceClientMock.OrderInfo. %v %v %v", ctx, in, opts)
	return
}

// OrderInfoAfterCounter returns a count of finished OrderServiceClientMock.OrderInfo invocations
func (mmOrderInfo *OrderServiceClientMock) OrderInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.afterOrderInfoCounter)
}

// OrderInfoBeforeCounter returns a count of OrderServiceClientMock.OrderInfo invocations
func (mmOrderInfo *OrderServiceClientMock) OrderInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderInfo.beforeOrderInfoCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceClientMock.OrderInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderInfo *mOrderServiceClientMockOrderInfo) Calls() []*OrderServiceClientMockOrderInfoParams {
	mmOrderInfo.mutex.RLock()

	argCopy := make([]*OrderServiceClientMockOrderInfoParams, len(mmOrderInfo.callArgs))
	copy(argCopy, mmOrderInfo.callArgs)

	mmOrderInfo.mutex.RUnlock()

	return argCopy
}

// MinimockOrderInfoDone returns true if the count of the OrderInfo invocations corresponds
// the number of defined expectations
func (m *OrderServiceClientMock) MinimockOrderInfoDone() bool {
	if m.OrderInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderInfoMock.invocationsDone()
}

// MinimockOrderInfoInspect logs each unmet expectation
func (m *OrderServiceClientMock) MinimockOrderInfoInspect() {
	for _, e := range m.OrderInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderInfoCounter := mm_atomic.LoadUint64(&m.afterOrderInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderInfoMock.defaultExpectation != nil && afterOrderInfoCounter < 1 {
		if m.OrderInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderInfo at\n%s", m.OrderInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderInfo at\n%s with params: %#v", m.OrderInfoMock.defaultExpectation.expectationOrigins.origin, *m.OrderInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderInfo != nil && afterOrderInfoCounter < 1 {
		m.t.Errorf("Expected call to OrderServiceClientMock.OrderInfo at\n%s", m.funcOrderInfoOrigin)
	}

	if !m.OrderInfoMock.invocationsDone() && afterOrderInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceClientMock.OrderInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderInfoMock.expectedInvocations), m.OrderInfoMock.expectedInvocationsOrigin, afterOrderInfoCounter)
	}
}

type mOrderServiceClientMockOrderPay struct {
	optional           bool
	mock               *OrderServiceClientMock
	defaultExpectation *OrderServiceClientMockOrderPayExpectation
	expectations       []*OrderServiceClientMockOrderPayExpectation

	callArgs []*OrderServiceClientMockOrderPayParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderServiceClientMockOrderPayExpectation specifies expectation struct of the OrderServiceClient.OrderPay
type OrderServiceClientMockOrderPayExpectation struct {
	mock               *OrderServiceClientMock
	params             *OrderServiceClientMockOrderPayParams
	paramPtrs          *OrderServiceClientMockOrderPayParamPtrs
	expectationOrigins OrderServiceClientMockOrderPayExpectationOrigins
	results            *OrderServiceClientMockOrderPayResults
	returnOrigin       string
	Counter            uint64
}

// OrderServiceClientMockOrderPayParams contains parameters of the OrderServiceClient.OrderPay
type OrderServiceClientMockOrderPayParams struct {
	ctx  context.Context
	in   *mm_orders.OrderPayRequest
	opts []grpc.CallOption
}

// OrderServiceClientMockOrderPayParamPtrs contains pointers to parameters of the OrderServiceClient.OrderPay
type OrderServiceClientMockOrderPayParamPtrs struct {
	ctx  *context.Context
	in   **mm_orders.OrderPayRequest
	opts *[]grpc.CallOption
}

// OrderServiceClientMockOrderPayResults contains results of the OrderServiceClient.OrderPay
type OrderServiceClientMockOrderPayResults struct {
	op1 *mm_orders.OrderPayResponse
	err error
}

// OrderServiceClientMockOrderPayOrigins contains origins of expectations of the OrderServiceClient.OrderPay
type OrderServiceClientMockOrderPayExpectationOrigins struct {
	origin     string
	originCtx  string
	originIn   string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderPay *mOrderServiceClientMockOrderPay) Optional() *mOrderServiceClientMockOrderPay {
	mmOrderPay.optional = true
	return mmOrderPay
}

// Expect sets up expected params for OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) Expect(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption) *mOrderServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.paramPtrs != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by ExpectParams functions")
	}

	mmOrderPay.defaultExpectation.params = &OrderServiceClientMockOrderPayParams{ctx, in, opts}
	mmOrderPay.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderPay.expectations {
		if minimock.Equal(e.params, mmOrderPay.defaultExpectation.params) {
			mmOrderPay.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderPay.defaultExpectation.params)
		}
	}

	return mmOrderPay
}

// ExpectCtxParam1 sets up expected param ctx for OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) ExpectCtxParam1(ctx context.Context) *mOrderServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderPay.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderPay
}

// ExpectInParam2 sets up expected param in for OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) ExpectInParam2(in *mm_orders.OrderPayRequest) *mOrderServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.in = &in
	mmOrderPay.defaultExpectation.expectationOrigins.originIn = minimock.CallerInfo(1)

	return mmOrderPay
}

// ExpectOptsParam3 sets up expected param opts for OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) ExpectOptsParam3(opts ...grpc.CallOption) *mOrderServiceClientMockOrderPay {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceClientMockOrderPayExpectation{}
	}

	if mmOrderPay.defaultExpectation.params != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Expect")
	}

	if mmOrderPay.defaultExpectation.paramPtrs == nil {
		mmOrderPay.defaultExpectation.paramPtrs = &OrderServiceClientMockOrderPayParamPtrs{}
	}
	mmOrderPay.defaultExpectation.paramPtrs.opts = &opts
	mmOrderPay.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmOrderPay
}

// Inspect accepts an inspector function that has same arguments as the OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) Inspect(f func(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption)) *mOrderServiceClientMockOrderPay {
	if mmOrderPay.mock.inspectFuncOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("Inspect function is already set for OrderServiceClientMock.OrderPay")
	}

	mmOrderPay.mock.inspectFuncOrderPay = f

	return mmOrderPay
}

// Return sets up results that will be returned by OrderServiceClient.OrderPay
func (mmOrderPay *mOrderServiceClientMockOrderPay) Return(op1 *mm_orders.OrderPayResponse, err error) *OrderServiceClientMock {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	if mmOrderPay.defaultExpectation == nil {
		mmOrderPay.defaultExpectation = &OrderServiceClientMockOrderPayExpectation{mock: mmOrderPay.mock}
	}
	mmOrderPay.defaultExpectation.results = &OrderServiceClientMockOrderPayResults{op1, err}
	mmOrderPay.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderPay.mock
}

// Set uses given function f to mock the OrderServiceClient.OrderPay method
func (mmOrderPay *mOrderServiceClientMockOrderPay) Set(f func(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderPayResponse, err error)) *OrderServiceClientMock {
	if mmOrderPay.defaultExpectation != nil {
		mmOrderPay.mock.t.Fatalf("Default expectation is already set for the OrderServiceClient.OrderPay method")
	}

	if len(mmOrderPay.expectations) > 0 {
		mmOrderPay.mock.t.Fatalf("Some expectations are already set for the OrderServiceClient.OrderPay method")
	}

	mmOrderPay.mock.funcOrderPay = f
	mmOrderPay.mock.funcOrderPayOrigin = minimock.CallerInfo(1)
	return mmOrderPay.mock
}

// When sets expectation for the OrderServiceClient.OrderPay which will trigger the result defined by the following
// Then helper
func (mmOrderPay *mOrderServiceClientMockOrderPay) When(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption) *OrderServiceClientMockOrderPayExpectation {
	if mmOrderPay.mock.funcOrderPay != nil {
		mmOrderPay.mock.t.Fatalf("OrderServiceClientMock.OrderPay mock is already set by Set")
	}

	expectation := &OrderServiceClientMockOrderPayExpectation{
		mock:               mmOrderPay.mock,
		params:             &OrderServiceClientMockOrderPayParams{ctx, in, opts},
		expectationOrigins: OrderServiceClientMockOrderPayExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderPay.expectations = append(mmOrderPay.expectations, expectation)
	return expectation
}

// Then sets up OrderServiceClient.OrderPay return parameters for the expectation previously defined by the When method
func (e *OrderServiceClientMockOrderPayExpectation) Then(op1 *mm_orders.OrderPayResponse, err error) *OrderServiceClientMock {
	e.results = &OrderServiceClientMockOrderPayResults{op1, err}
	return e.mock
}

// Times sets number of times OrderServiceClient.OrderPay should be invoked
func (mmOrderPay *mOrderServiceClientMockOrderPay) Times(n uint64) *mOrderServiceClientMockOrderPay {
	if n == 0 {
		mmOrderPay.mock.t.Fatalf("Times of OrderServiceClientMock.OrderPay mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderPay.expectedInvocations, n)
	mmOrderPay.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderPay
}

func (mmOrderPay *mOrderServiceClientMockOrderPay) invocationsDone() bool {
	if len(mmOrderPay.expectations) == 0 && mmOrderPay.defaultExpectation == nil && mmOrderPay.mock.funcOrderPay == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderPay.mock.afterOrderPayCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderPay.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderPay implements mm_orders.OrderServiceClient
func (mmOrderPay *OrderServiceClientMock) OrderPay(ctx context.Context, in *mm_orders.OrderPayRequest, opts ...grpc.CallOption) (op1 *mm_orders.OrderPayResponse, err error) {
	mm_atomic.AddUint64(&mmOrderPay.beforeOrderPayCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderPay.afterOrderPayCounter, 1)

	mmOrderPay.t.Helper()

	if mmOrderPay.inspectFuncOrderPay != nil {
		mmOrderPay.inspectFuncOrderPay(ctx, in, opts...)
	}

	mm_params := OrderServiceClientMockOrderPayParams{ctx, in, opts}

	// Record call args
	mmOrderPay.OrderPayMock.mutex.Lock()
	mmOrderPay.OrderPayMock.callArgs = append(mmOrderPay.OrderPayMock.callArgs, &mm_params)
	mmOrderPay.OrderPayMock.mutex.Unlock()

	for _, e := range mmOrderPay.OrderPayMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmOrderPay.OrderPayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderPay.OrderPayMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderPay.OrderPayMock.defaultExpectation.params
		mm_want_ptrs := mmOrderPay.OrderPayMock.defaultExpectation.paramPtrs

		mm_got := OrderServiceClientMockOrderPayParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderPay.t.Errorf("OrderServiceClientMock.OrderPay got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmOrderPay.t.Errorf("OrderServiceClientMock.OrderPay got unexpected parameter in, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originIn, *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmOrderPay.t.Errorf("OrderServiceClientMock.OrderPay got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderPay.t.Errorf("OrderServiceClientMock.OrderPay got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderPay.OrderPayMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderPay.OrderPayMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderPay.t.Fatal("No results are set for the OrderServiceClientMock.OrderPay")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmOrderPay.funcOrderPay != nil {
		return mmOrderPay.funcOrderPay(ctx, in, opts...)
	}
	mmOrderPay.t.Fatalf("Unexpected call to OrderServiceClientMock.OrderPay. %v %v %v", ctx, in, opts)
	return
}

// OrderPayAfterCounter returns a count of finished OrderServiceClientMock.OrderPay invocations
func (mmOrderPay *OrderServiceClientMock) OrderPayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.afterOrderPayCounter)
}

// OrderPayBeforeCounter returns a count of OrderServiceClientMock.OrderPay invocations
func (mmOrderPay *OrderServiceClientMock) OrderPayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPay.beforeOrderPayCounter)
}

// Calls returns a list of arguments used in each call to OrderServiceClientMock.OrderPay.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderPay *mOrderServiceClientMockOrderPay) Calls() []*OrderServiceClientMockOrderPayParams {
	mmOrderPay.mutex.RLock()

	argCopy := make([]*OrderServiceClientMockOrderPayParams, len(mmOrderPay.callArgs))
	copy(argCopy, mmOrderPay.callArgs)

	mmOrderPay.mutex.RUnlock()

	return argCopy
}

// MinimockOrderPayDone returns true if the count of the OrderPay invocations corresponds
// the number of defined expectations
func (m *OrderServiceClientMock) MinimockOrderPayDone() bool {
	if m.OrderPayMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderPayMock.invocationsDone()
}

// MinimockOrderPayInspect logs each unmet expectation
func (m *OrderServiceClientMock) MinimockOrderPayInspect() {
	for _, e := range m.OrderPayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderPay at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderPayCounter := mm_atomic.LoadUint64(&m.afterOrderPayCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderPayMock.defaultExpectation != nil && afterOrderPayCounter < 1 {
		if m.OrderPayMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderPay at\n%s", m.OrderPayMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderServiceClientMock.OrderPay at\n%s with params: %#v", m.OrderPayMock.defaultExpectation.expectationOrigins.origin, *m.OrderPayMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderPay != nil && afterOrderPayCounter < 1 {
		m.t.Errorf("Expected call to OrderServiceClientMock.OrderPay at\n%s", m.funcOrderPayOrigin)
	}

	if !m.OrderPayMock.invocationsDone() && afterOrderPayCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderServiceClientMock.OrderPay at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderPayMock.expectedInvocations), m.OrderPayMock.expectedInvocationsOrigin, afterOrderPayCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderServiceClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderCancelInspect()

			m.MinimockOrderCreateInspect()

			m.MinimockOrderInfoInspect()

			m.MinimockOrderPayInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderCancelDone() &&
		m.MinimockOrderCreateDone() &&
		m.MinimockOrderInfoDone() &&
		m.MinimockOrderPayDone()
}
